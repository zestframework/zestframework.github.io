{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Zest Framework \u00b6 Warning This document is on working stage. Error & Omissions Expected Index \u00b6 Home The Basics Home Installation Routing Controller Views Models Validations Sessions Cookies Logging Frontend Localization Input Intermediate Databases Security Hashing Encrpytion Components Components Getting started with docker Old Documentation. \u00b6 v2.0.3","title":"Index"},{"location":"#zest-framework","text":"Warning This document is on working stage. Error & Omissions Expected","title":"Zest Framework"},{"location":"#index","text":"Home The Basics Home Installation Routing Controller Views Models Validations Sessions Cookies Logging Frontend Localization Input Intermediate Databases Security Hashing Encrpytion Components Components Getting started with docker","title":"Index"},{"location":"#old-documentation","text":"v2.0.3","title":"Old Documentation."},{"location":"master/docker/","text":"Getting started with docker \u00b6 Introduction \u00b6 This is about the Docker container build with Zest framework development environment Installation \u00b6 Clone the Zest Docker repo provided by peter279k git clone https://github.com/zestframework/zest-docker.git Before building this Docker image, you should have the docker command firstly Then executing following command: docker build -t zest-docker . After building Docker image successfully, we should use this command to check Docker image is available: docker images zest-docker To run this environment as a Docker container, we can use this command: docker run -d -p 8000 :80 zest-docker Then visit the http://localhost:8000 via we browser. It will see the following captured picture and the container build is done","title":"Getting started with docker"},{"location":"master/docker/#getting-started-with-docker","text":"","title":"Getting started with docker"},{"location":"master/docker/#introduction","text":"This is about the Docker container build with Zest framework development environment","title":"Introduction"},{"location":"master/docker/#installation","text":"Clone the Zest Docker repo provided by peter279k git clone https://github.com/zestframework/zest-docker.git Before building this Docker image, you should have the docker command firstly Then executing following command: docker build -t zest-docker . After building Docker image successfully, we should use this command to check Docker image is available: docker images zest-docker To run this environment as a Docker container, we can use this command: docker run -d -p 8000 :80 zest-docker Then visit the http://localhost:8000 via we browser. It will see the following captured picture and the container build is done","title":"Installation"},{"location":"master/basics/controller/","text":"Info The controller is generally responsible for performing a request action. Creating a Controller \u00b6 You can easily create controllers in \"\"Zest\"\" Framework goto App/Controllers/ form project root you have to create more controller here. Writing simple controller \u00b6 <?php namespace App\\Controllers ; use Zest\\View\\View ; //you will learn more about view in later this is for accessing view class Home extends \\Zest\\Controller\\Controller { public function index () { echo View :: view ( \"Home/index\" ); //you will learn more about view in later this is for accessing view } } This is easy way for creating controllers this create home page Complex way for writing controller \u00b6 <?php namespace App\\Controllers ; use Zest\\View\\View ; //you will learn more about view in later this is for accessing view class About extends \\Zest\\Controller\\Controller { public function index () { echo $this -> route_params [ 'username' ]; //$this->router_params use for accessing paramter begin passed for more information see https://github.com/Softhub99/Zest/wiki/Routing#router-with-complex-parameter } public function about () { echo view :: SetTemplate ( \"Home/index.html\" ,[ 'header' => 'PHP Template engine' ,]); //you will learn more about view/template engine in later this is for accessing view } }","title":"Controller"},{"location":"master/basics/controller/#creating-a-controller","text":"You can easily create controllers in \"\"Zest\"\" Framework goto App/Controllers/ form project root you have to create more controller here.","title":"Creating a Controller"},{"location":"master/basics/controller/#writing-simple-controller","text":"<?php namespace App\\Controllers ; use Zest\\View\\View ; //you will learn more about view in later this is for accessing view class Home extends \\Zest\\Controller\\Controller { public function index () { echo View :: view ( \"Home/index\" ); //you will learn more about view in later this is for accessing view } } This is easy way for creating controllers this create home page","title":"Writing simple controller"},{"location":"master/basics/controller/#complex-way-for-writing-controller","text":"<?php namespace App\\Controllers ; use Zest\\View\\View ; //you will learn more about view in later this is for accessing view class About extends \\Zest\\Controller\\Controller { public function index () { echo $this -> route_params [ 'username' ]; //$this->router_params use for accessing paramter begin passed for more information see https://github.com/Softhub99/Zest/wiki/Routing#router-with-complex-parameter } public function about () { echo view :: SetTemplate ( \"Home/index.html\" ,[ 'header' => 'PHP Template engine' ,]); //you will learn more about view/template engine in later this is for accessing view } }","title":"Complex way for writing controller"},{"location":"master/basics/cookies/","text":"Info Cookie Management library bundled with Zest Framework Configuration \u00b6 There is no configuration need for using session library in Zest framework Set \u00b6 For setting the cookie and its value you need to used set_cookie() function take a look at an example: <?php namespace App\\Models ; class users { public function login () { //its prototype is set_cookie($name, $value, $expire, $path, $domain, $secure, $httponly); set_cookie ( \"test\" , \"bla\" , 3600 , \"/\" , $_SERVER [ 'SERVER_NAME' ], true , false ); //return boolean, true | false } } Get \u00b6 To get the cookie value you need to used get_cookie() function take a look at an example: <?php namespace App\\Models ; class users { public function getLogin () { //its prototype is get_cookie(\"name\"); get_cookie ( 'users' ); //return value on success boolean false on fail } } Delete \u00b6 For deleting the cookie value you need to used delete_cookie() function take a look at example: <?php namespace App\\Models ; class users { public function logout () { //its prototype is delete_cookie(\"name\"); delete_cookie ( 'users' ); //return boolean, true | false } } Check \u00b6 For checking is cookie is set or exists you need to used is_cookie() fuunction take a look at an example: <?php namespace App\\Models ; class users { public function isLogin () { //its prototype is is_cookie(\"name\"); is_cookie ( 'users' ); //return boolean, true | false } }","title":"Cookies"},{"location":"master/basics/cookies/#configuration","text":"There is no configuration need for using session library in Zest framework","title":"Configuration"},{"location":"master/basics/cookies/#set","text":"For setting the cookie and its value you need to used set_cookie() function take a look at an example: <?php namespace App\\Models ; class users { public function login () { //its prototype is set_cookie($name, $value, $expire, $path, $domain, $secure, $httponly); set_cookie ( \"test\" , \"bla\" , 3600 , \"/\" , $_SERVER [ 'SERVER_NAME' ], true , false ); //return boolean, true | false } }","title":"Set"},{"location":"master/basics/cookies/#get","text":"To get the cookie value you need to used get_cookie() function take a look at an example: <?php namespace App\\Models ; class users { public function getLogin () { //its prototype is get_cookie(\"name\"); get_cookie ( 'users' ); //return value on success boolean false on fail } }","title":"Get"},{"location":"master/basics/cookies/#delete","text":"For deleting the cookie value you need to used delete_cookie() function take a look at example: <?php namespace App\\Models ; class users { public function logout () { //its prototype is delete_cookie(\"name\"); delete_cookie ( 'users' ); //return boolean, true | false } }","title":"Delete"},{"location":"master/basics/cookies/#check","text":"For checking is cookie is set or exists you need to used is_cookie() fuunction take a look at an example: <?php namespace App\\Models ; class users { public function isLogin () { //its prototype is is_cookie(\"name\"); is_cookie ( 'users' ); //return boolean, true | false } }","title":"Check"},{"location":"master/basics/home/","text":"Zest Framework \u00b6 Welcome to Zest! Zest is a very light-weight PHP framework without any dependencies except core and autoloader. Who is Zest For? \u00b6 Zest is for PHP developers who want to build apps instead of coding common things like validation, routing, database manipulation, etc, from scratch. Zest offers a set of well-defined toolkits that take care of those things allowing you to focus on building your app. The purpose of Zest Framework \u00b6 As for PHP, there are many PHP frameworks available nowadays, so the question is raised as to why we/people should use ZestFramework. The main purpose of Zest framework is to provide a very lightweight framework without any external dependencies except core and autoloader. Zest Framework consists of two dependencies. \u00b6 Core \u00b6 Core files contains all the necessary files that are required for Zest framework to work properly (e.g., routing, validating, etc). Autoloader \u00b6 Composer autoloader is used for autoloading files. It's necessary as a means to to load files efficiently. We use Composer autoloader for loading files. Info The size of Zest core files less then 1MB.","title":"Home"},{"location":"master/basics/home/#zest-framework","text":"Welcome to Zest! Zest is a very light-weight PHP framework without any dependencies except core and autoloader.","title":"Zest Framework"},{"location":"master/basics/home/#who-is-zest-for","text":"Zest is for PHP developers who want to build apps instead of coding common things like validation, routing, database manipulation, etc, from scratch. Zest offers a set of well-defined toolkits that take care of those things allowing you to focus on building your app.","title":"Who is Zest For?"},{"location":"master/basics/home/#the-purpose-of-zest-framework","text":"As for PHP, there are many PHP frameworks available nowadays, so the question is raised as to why we/people should use ZestFramework. The main purpose of Zest framework is to provide a very lightweight framework without any external dependencies except core and autoloader.","title":"The purpose of Zest Framework"},{"location":"master/basics/home/#zest-framework-consists-of-two-dependencies","text":"","title":"Zest Framework consists of two dependencies."},{"location":"master/basics/home/#core","text":"Core files contains all the necessary files that are required for Zest framework to work properly (e.g., routing, validating, etc).","title":"Core"},{"location":"master/basics/home/#autoloader","text":"Composer autoloader is used for autoloading files. It's necessary as a means to to load files efficiently. We use Composer autoloader for loading files. Info The size of Zest core files less then 1MB.","title":"Autoloader"},{"location":"master/basics/installation/","text":"Installation Requirements: \u00b6 PHP 7.1 Composer Danger Installing Zest is very simple. First, ensure you have the right PHP version and Composer installed. then in your command prompt run: $ composer create-project zest/zest blog The above command will create a new Zest project inside a new folder name blog, then: $ cd blog and then run $ composer update Local Development With VirtualHost Running Your Project With VirtualHost <VirtualHost *:80 > DocumentRoot \"/var/www/html/blog/public\" ServerName example.com </VirtualHost> Restart Apache $ service httpd restsart Navigate to http://example.com , you should be able to view the app. Running Your Project Without VirtualHostif you choose to run your project without VirtualHost, So you have to access it with http://localhost/blog/public","title":"Installation"},{"location":"master/basics/installation/#installation-requirements","text":"PHP 7.1 Composer Danger Installing Zest is very simple. First, ensure you have the right PHP version and Composer installed. then in your command prompt run: $ composer create-project zest/zest blog The above command will create a new Zest project inside a new folder name blog, then: $ cd blog and then run $ composer update Local Development With VirtualHost Running Your Project With VirtualHost <VirtualHost *:80 > DocumentRoot \"/var/www/html/blog/public\" ServerName example.com </VirtualHost> Restart Apache $ service httpd restsart Navigate to http://example.com , you should be able to view the app. Running Your Project Without VirtualHostif you choose to run your project without VirtualHost, So you have to access it with http://localhost/blog/public","title":"Installation Requirements:"},{"location":"master/basics/logging/","text":"Logger \u00b6 Logging is one of the most ubiquitous tasks encountered in PHP. We use logs to track error messages, record important events, and debug problems with the code. Use logger \u00b6 $logger = new \\Zest\\Common\\Logger\\Logger; $logger->notice('This file {file} is not found',['file' => 'user.jpg']); //Display the log msg // var_dump($logger->get); echo $logger->get()['message']; //echo View::view('Home/index'); the get() method return array , level and message Log file \u00b6 Log file is locate in Storage/Data/.logs Levels \u00b6 emergency => $logger->emergency(msg,[context]) alert => $logger->alert(msg,[context]) critical => $logger->emergency(msg,[critical]) error => $logger->error(msg,[context]) warning => $logger->warning(msg,[context]) notice => $logger->notice(msg,[context]) info => $logger->info(msg,[context]) debug => $logger->debug(msg,[context])","title":"Logging"},{"location":"master/basics/logging/#logger","text":"Logging is one of the most ubiquitous tasks encountered in PHP. We use logs to track error messages, record important events, and debug problems with the code.","title":"Logger"},{"location":"master/basics/logging/#use-logger","text":"$logger = new \\Zest\\Common\\Logger\\Logger; $logger->notice('This file {file} is not found',['file' => 'user.jpg']); //Display the log msg // var_dump($logger->get); echo $logger->get()['message']; //echo View::view('Home/index'); the get() method return array , level and message","title":"Use logger"},{"location":"master/basics/logging/#log-file","text":"Log file is locate in Storage/Data/.logs","title":"Log file"},{"location":"master/basics/logging/#levels","text":"emergency => $logger->emergency(msg,[context]) alert => $logger->alert(msg,[context]) critical => $logger->emergency(msg,[critical]) error => $logger->error(msg,[context]) warning => $logger->warning(msg,[context]) notice => $logger->notice(msg,[context]) info => $logger->info(msg,[context]) debug => $logger->debug(msg,[context])","title":"Levels"},{"location":"master/basics/models/","text":"Model \u00b6 Info Model are actually behavior of app. Creating the model \u00b6 You will find model directory in App/Models/ , All the models store here Suppose you want create database modal thats handel database stuff it will look like that <?php namespace App\\Models ; use Config\\Config ; use Zest\\Database\\Db as DB ; class Post extends DB { /* * Store database name */ protected static $db_name = Config :: DB_NAME ; /* * Store database table name */ protected static $db_tbl = 'posts' ; public function name () { $db = new DB (); $db -> db () -> method (); //example code //$db->db()->close() //close the connection } } Accessing models in Controllers \u00b6 You can accesss models in following way \\App\\Models\\modalname::method(param); So in our above example its look like \\App\\Models\\Post::yourmethod","title":"Models"},{"location":"master/basics/models/#model","text":"Info Model are actually behavior of app.","title":"Model"},{"location":"master/basics/models/#creating-the-model","text":"You will find model directory in App/Models/ , All the models store here Suppose you want create database modal thats handel database stuff it will look like that <?php namespace App\\Models ; use Config\\Config ; use Zest\\Database\\Db as DB ; class Post extends DB { /* * Store database name */ protected static $db_name = Config :: DB_NAME ; /* * Store database table name */ protected static $db_tbl = 'posts' ; public function name () { $db = new DB (); $db -> db () -> method (); //example code //$db->db()->close() //close the connection } }","title":"Creating the model"},{"location":"master/basics/models/#accessing-models-in-controllers","text":"You can accesss models in following way \\App\\Models\\modalname::method(param); So in our above example its look like \\App\\Models\\Post::yourmethod","title":"Accessing models in Controllers"},{"location":"master/basics/routing/","text":"Where to Define Your Application Routes \u00b6 goto routes directory of project you will see routes.php all routes define here Simple way to define router \u00b6 Zest framework support different way to define routes $router->add('path', ['controller' => 'name', 'action' => 'name']); OR $router->add('path','controller@method'); the path is the like example.com/about in this case about will be the path controller is the name of controller which one you want to use for this route action is method of controller Dispatch \u00b6 $router->dispatch($_SERVER['QUERY_STRING']); are use to process request Route with Closure or Callback \u00b6 You can also define a route that uses a Closure or callback as the handler like so $router->add('user/{id:[0-9]}', function ($args) { echo 'Example route using closure '.$args['id'] . \" \".$args['name']; }); Router with parameter \u00b6 Router with parameter means you want passing parameter to the url e.g example.com/profile/100 100 is the parameter of the request $router->add('{controller}/{id:\\d+}/{action}', ['controller' => 'profile','action' => 'index']); This will create example.com/profile/100 for you you can access by placeholder that you use in case id Router with complex parameter \u00b6 You can also add router with complex parameter in this case you have to use regx $router->add('{controller}/{username:[a-z+0-9]+}/{action}', ['controller' => 'profile','action' => 'index']); its create url example.com/profile/username you can pass string+numbers here and access through placeholder that you define in this case username Defining GET Routes \u00b6 <?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> get ( '' , 'Home@index' ); //OR // $router->add('',\"Home@index\",'GET'); // $router->get('',['controller'=>'Home','method'=>'index']); // $router->add('',['controller'=>'Home','method'=>'index'],'GET'); Defining POST Routes \u00b6 <?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> post ( 'login' , 'Home@login' ); //OR // $router->add('login',\"Home@login\",'POST'); // $router->post('login',['controller'=>'Home','method'=>'login']); // $router->add('login',['controller'=>'Home','method'=>'login'],'POST'); The Zest Route class supports all major HTTP Verbs (POST, GET, PUT, PATCH, DELETE) for example to create a route with PATCH HTTP verb simple do the following <?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> patch ( 'profile/update' , 'Account@update' ); //OR // $router->add('login',\"Home@update\",'PATCH'); // $router->patch('login',['controller'=>'Home','method'=>'update']); // $router->add('login',['controller'=>'Home','method'=>'update'],'PATCH'); Route Caching \u00b6 Zest Franework provide router caching feature so you should take advantage of Zest's route cache. Zest router cache file Zest router file located at root/Storage/Cache Using the route cache will drastically decrease the amount of time it takes to register all of your application's routes. In some cases, your route registration may even be up to 100x faster. To generate a route cache, just need to enable from config file ROUTER_CACHE => set to true to enable caching, or false to disable caching. Default value is true. Zest framework provide an easy creating website using zest After running this command, your cached routes file will be loaded on every request. Remember, if you add any new routes. You don't need to regenerate a fresh route cache, Because Zest framework regenerate a fresh route cache automatically for you affter specific time define in config file. ROUTE_CACHE_REGENERATE timestamp for cache file, after expire cache file auto refreshed , default value is 3600 - 1Hour. Info Router caching feature is not available in components","title":"Routing"},{"location":"master/basics/routing/#where-to-define-your-application-routes","text":"goto routes directory of project you will see routes.php all routes define here","title":"Where to Define Your Application Routes"},{"location":"master/basics/routing/#simple-way-to-define-router","text":"Zest framework support different way to define routes $router->add('path', ['controller' => 'name', 'action' => 'name']); OR $router->add('path','controller@method'); the path is the like example.com/about in this case about will be the path controller is the name of controller which one you want to use for this route action is method of controller","title":"Simple way to define router"},{"location":"master/basics/routing/#dispatch","text":"$router->dispatch($_SERVER['QUERY_STRING']); are use to process request","title":"Dispatch"},{"location":"master/basics/routing/#route-with-closure-or-callback","text":"You can also define a route that uses a Closure or callback as the handler like so $router->add('user/{id:[0-9]}', function ($args) { echo 'Example route using closure '.$args['id'] . \" \".$args['name']; });","title":"Route with Closure or Callback"},{"location":"master/basics/routing/#router-with-parameter","text":"Router with parameter means you want passing parameter to the url e.g example.com/profile/100 100 is the parameter of the request $router->add('{controller}/{id:\\d+}/{action}', ['controller' => 'profile','action' => 'index']); This will create example.com/profile/100 for you you can access by placeholder that you use in case id","title":"Router with parameter"},{"location":"master/basics/routing/#router-with-complex-parameter","text":"You can also add router with complex parameter in this case you have to use regx $router->add('{controller}/{username:[a-z+0-9]+}/{action}', ['controller' => 'profile','action' => 'index']); its create url example.com/profile/username you can pass string+numbers here and access through placeholder that you define in this case username","title":"Router with complex parameter"},{"location":"master/basics/routing/#defining-get-routes","text":"<?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> get ( '' , 'Home@index' ); //OR // $router->add('',\"Home@index\",'GET'); // $router->get('',['controller'=>'Home','method'=>'index']); // $router->add('',['controller'=>'Home','method'=>'index'],'GET');","title":"Defining GET Routes"},{"location":"master/basics/routing/#defining-post-routes","text":"<?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> post ( 'login' , 'Home@login' ); //OR // $router->add('login',\"Home@login\",'POST'); // $router->post('login',['controller'=>'Home','method'=>'login']); // $router->add('login',['controller'=>'Home','method'=>'login'],'POST'); The Zest Route class supports all major HTTP Verbs (POST, GET, PUT, PATCH, DELETE) for example to create a route with PATCH HTTP verb simple do the following <?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> patch ( 'profile/update' , 'Account@update' ); //OR // $router->add('login',\"Home@update\",'PATCH'); // $router->patch('login',['controller'=>'Home','method'=>'update']); // $router->add('login',['controller'=>'Home','method'=>'update'],'PATCH');","title":"Defining POST Routes"},{"location":"master/basics/routing/#route-caching","text":"Zest Franework provide router caching feature so you should take advantage of Zest's route cache. Zest router cache file Zest router file located at root/Storage/Cache Using the route cache will drastically decrease the amount of time it takes to register all of your application's routes. In some cases, your route registration may even be up to 100x faster. To generate a route cache, just need to enable from config file ROUTER_CACHE => set to true to enable caching, or false to disable caching. Default value is true. Zest framework provide an easy creating website using zest After running this command, your cached routes file will be loaded on every request. Remember, if you add any new routes. You don't need to regenerate a fresh route cache, Because Zest framework regenerate a fresh route cache automatically for you affter specific time define in config file. ROUTE_CACHE_REGENERATE timestamp for cache file, after expire cache file auto refreshed , default value is 3600 - 1Hour. Info Router caching feature is not available in components","title":"Route Caching"},{"location":"master/basics/sessions/","text":"Session Handling \u00b6 Info Session handling library bundled with Zest Framework. Configuration \u00b6 There is no configuration need for using session library in Zest framework but if you want change session storage path in Config.php you have to change according to the details of your server. /** * Default Session storage path. * * @var string */ const Session_Path = '../Storage/Session/'; Set \u00b6 For setting the session and its value you need to used setValue() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function login () { //its prototype is Session::setvalue(\"name\",\"value\"); Session :: setValue ( 'users' , 11223 ); //return boolean, true | false } } Get \u00b6 To get the session value you need to used getValue() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function getLogin () { //its prototype is Session::getValue(\"name\"); Session :: getValue ( 'users' ); //return value on success boolean false on fail } } Delete \u00b6 For deleting the session value you need to used unsetValue() method take a look at example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function logout () { //its prototype is Session::unsetValue(\"name\"); Session :: unsetValue ( 'users' ); //return boolean, true | false } } Check \u00b6 For checking is session is active you need to used isSession() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function isLogin () { //its prototype is Session::isSession(\"name\"); Session :: isSession ( 'users' ); //return boolean, true | false } }","title":"Sessions"},{"location":"master/basics/sessions/#session-handling","text":"Info Session handling library bundled with Zest Framework.","title":"Session Handling"},{"location":"master/basics/sessions/#configuration","text":"There is no configuration need for using session library in Zest framework but if you want change session storage path in Config.php you have to change according to the details of your server. /** * Default Session storage path. * * @var string */ const Session_Path = '../Storage/Session/';","title":"Configuration"},{"location":"master/basics/sessions/#set","text":"For setting the session and its value you need to used setValue() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function login () { //its prototype is Session::setvalue(\"name\",\"value\"); Session :: setValue ( 'users' , 11223 ); //return boolean, true | false } }","title":"Set"},{"location":"master/basics/sessions/#get","text":"To get the session value you need to used getValue() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function getLogin () { //its prototype is Session::getValue(\"name\"); Session :: getValue ( 'users' ); //return value on success boolean false on fail } }","title":"Get"},{"location":"master/basics/sessions/#delete","text":"For deleting the session value you need to used unsetValue() method take a look at example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function logout () { //its prototype is Session::unsetValue(\"name\"); Session :: unsetValue ( 'users' ); //return boolean, true | false } }","title":"Delete"},{"location":"master/basics/sessions/#check","text":"For checking is session is active you need to used isSession() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function isLogin () { //its prototype is Session::isSession(\"name\"); Session :: isSession ( 'users' ); //return boolean, true | false } }","title":"Check"},{"location":"master/basics/validations/","text":"Validations \u00b6 Info Zest provides different methods to easily validate data. Validation simple usage \u00b6 Let's consider a simple example. We shall attempt to accept input from the user. The first thing we need to do is define the necessary routes. Define Route \u00b6 $router->add('user/create',['controller'=>\"User\",'action'=>'userCreate']); Create a Controller with Validation Logic \u00b6 <?php namespace App\\Controllers ; use Zest\\View\\View ; use Zest\\Validation\\Validation ; class User extends \\Zest\\Controller\\Controller { public function usercreate () { if ( input ( 'submit' )) { $rules = [ 'username' => [ 'required' => true , ], 'email' => [ 'required' => true ], 'password' => [ 'required' => true , ], ]; $validation = new Validation ( input_all (), $rules , 'input' ); if ( $validation -> fail ()){ $errors = $validation -> error () -> get (); foreach ( $errors as $error ) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } } else { //TO-Do create the user //We will provide auth clas soon } } else { View :: view ( 'Home/form' ); } } } User form file \u00b6 <!DOCTYPE html> < html > < head > < title > Signup </ title > </ head > < body > < form actio = '' method = 'post' > < label > Name: </ label > < input type = \"text\" name = \"username\" >< br > < label > Email: </ label > < input type = \"text\" name = \"email\" >< br > < label > Password: </ label > < input type = \"text\" name = \"password\" >< br > < input type = \"submit\" name = \"submit\" > </ form > </ body > </ html > Getting validation errors for specific fields \u00b6 /** * Check if a given key exists in error message * * @param $key * @return bool */ $exists = $validator->error()->has('username'); /** * Get all the validation errors for a specific fields * * @param $key * @return array */ $passwordErrors = $validator->error()->get('password'); /** * Get the first validation error for a specific fields * * @param $key * @return mixed */ $firstError = $validator->error()->first('email'); //OR $lastError = $validator->error()->lase('email'); } Available Validation Rules \u00b6 The following validation rule are available in Zest Framework Required rule \u00b6 The required rule is used to specify that a specific field cannot be empty: $rules = [ 'username' => ['required' => true,], ]; Int rule \u00b6 The int rule is used to specify that a specific field much be int: $rules = [ 'favNum' => ['int' => true,], ]; Float rule \u00b6 The float rule is used to specify that a specific field much be float: $rules = [ 'payment' => ['float' => true,], ]; String rule \u00b6 The string rule is used to specify that a specific field much be string: $rules = [ 'name' => ['string' => true,], ]; Email rule \u00b6 The required rule is used to specify that a specific field must be a valid email address: $rules = [ 'email' => ['email' => true,], ]; IP rule \u00b6 The IP rule is used to specify that a specific field must be valid IP address: $rules = [ 'email' => ['email' => true,], ]; JSON rule \u00b6 The JSON rule validates the json value $validation = new Validation('jsonValue','validate','json'); Unique rule \u00b6 The unique rule allows you to check if a given value exists in a specific database table: $validation = new Validation(['field'=> 'fieldLike_username','value'=>'valueToBeSearch'],'tabelName');","title":"Validations"},{"location":"master/basics/validations/#validations","text":"Info Zest provides different methods to easily validate data.","title":"Validations"},{"location":"master/basics/validations/#validation-simple-usage","text":"Let's consider a simple example. We shall attempt to accept input from the user. The first thing we need to do is define the necessary routes.","title":"Validation simple usage"},{"location":"master/basics/validations/#define-route","text":"$router->add('user/create',['controller'=>\"User\",'action'=>'userCreate']);","title":"Define Route"},{"location":"master/basics/validations/#create-a-controller-with-validation-logic","text":"<?php namespace App\\Controllers ; use Zest\\View\\View ; use Zest\\Validation\\Validation ; class User extends \\Zest\\Controller\\Controller { public function usercreate () { if ( input ( 'submit' )) { $rules = [ 'username' => [ 'required' => true , ], 'email' => [ 'required' => true ], 'password' => [ 'required' => true , ], ]; $validation = new Validation ( input_all (), $rules , 'input' ); if ( $validation -> fail ()){ $errors = $validation -> error () -> get (); foreach ( $errors as $error ) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } } else { //TO-Do create the user //We will provide auth clas soon } } else { View :: view ( 'Home/form' ); } } }","title":"Create a Controller with Validation Logic"},{"location":"master/basics/validations/#user-form-file","text":"<!DOCTYPE html> < html > < head > < title > Signup </ title > </ head > < body > < form actio = '' method = 'post' > < label > Name: </ label > < input type = \"text\" name = \"username\" >< br > < label > Email: </ label > < input type = \"text\" name = \"email\" >< br > < label > Password: </ label > < input type = \"text\" name = \"password\" >< br > < input type = \"submit\" name = \"submit\" > </ form > </ body > </ html >","title":"User form file"},{"location":"master/basics/validations/#getting-validation-errors-for-specific-fields","text":"/** * Check if a given key exists in error message * * @param $key * @return bool */ $exists = $validator->error()->has('username'); /** * Get all the validation errors for a specific fields * * @param $key * @return array */ $passwordErrors = $validator->error()->get('password'); /** * Get the first validation error for a specific fields * * @param $key * @return mixed */ $firstError = $validator->error()->first('email'); //OR $lastError = $validator->error()->lase('email'); }","title":"Getting validation errors for specific fields"},{"location":"master/basics/validations/#available-validation-rules","text":"The following validation rule are available in Zest Framework","title":"Available Validation Rules"},{"location":"master/basics/validations/#required-rule","text":"The required rule is used to specify that a specific field cannot be empty: $rules = [ 'username' => ['required' => true,], ];","title":"Required rule"},{"location":"master/basics/validations/#int-rule","text":"The int rule is used to specify that a specific field much be int: $rules = [ 'favNum' => ['int' => true,], ];","title":"Int rule"},{"location":"master/basics/validations/#float-rule","text":"The float rule is used to specify that a specific field much be float: $rules = [ 'payment' => ['float' => true,], ];","title":"Float rule"},{"location":"master/basics/validations/#string-rule","text":"The string rule is used to specify that a specific field much be string: $rules = [ 'name' => ['string' => true,], ];","title":"String rule"},{"location":"master/basics/validations/#email-rule","text":"The required rule is used to specify that a specific field must be a valid email address: $rules = [ 'email' => ['email' => true,], ];","title":"Email rule"},{"location":"master/basics/validations/#ip-rule","text":"The IP rule is used to specify that a specific field must be valid IP address: $rules = [ 'email' => ['email' => true,], ];","title":"IP rule"},{"location":"master/basics/validations/#json-rule","text":"The JSON rule validates the json value $validation = new Validation('jsonValue','validate','json');","title":"JSON rule"},{"location":"master/basics/validations/#unique-rule","text":"The unique rule allows you to check if a given value exists in a specific database table: $validation = new Validation(['field'=> 'fieldLike_username','value'=>'valueToBeSearch'],'tabelName');","title":"Unique rule"},{"location":"master/basics/views/","text":"Views \u00b6 Info Zest framework provides two ways for views. The default, built-in templating engine, and without a templating engine. Zest framework can't support third-party templating engines, but if you want to, you can see how to implement third-party templating engines in next section. Creating a View in simple way without a templating engine. \u00b6 Typically, all views should be created inside the App/Views/ folder. Suppose you're going to create a home view. So in this case, save the file as App/Views/Home.php or App/Views/Home/Home.php (whatever you want). <!doctype html> < body > < div class = \"container\" > Welcome </ div > </ body > You can access the view form controller by echo View::View(\"Home/index\"); . Your home controller should look like this: <?php namespace App\\Controllers; use \\Zest\\View\\View; class Home extends \\Zest\\Controller\\Controller { public function index() { echo View::view(\"Home/index\"); } } In the case of passing parameter, it should look like this: $data = ['name' => 'malik']; echo View::View(\"Home/index\",$data); You can access this parameter by: $name = $args['name']; Creating a View in a simple way with a templating engine \u00b6 Zest supports a built-in template engine that you can use in simple way. echo View::randerTemplate(\"Home/template.php\",[ 'name' => \"malik\", ]); Use in view file like this: {% name %} It prints \"malik\" on the screen. Minify HTML files \u00b6 ZestFramework minifies HTML by default. If you don't want to minify HTML view files, you should passed false argument in view method of the View class First Argument: file name with path like file or path/file. Second Argument: Any parameter that you want to be passed must be in an array. Third Argument: Minify; true => Minify, false => Don't minify. Must be bool . Default value is true .","title":"Views"},{"location":"master/basics/views/#views","text":"Info Zest framework provides two ways for views. The default, built-in templating engine, and without a templating engine. Zest framework can't support third-party templating engines, but if you want to, you can see how to implement third-party templating engines in next section.","title":"Views"},{"location":"master/basics/views/#creating-a-view-in-simple-way-without-a-templating-engine","text":"Typically, all views should be created inside the App/Views/ folder. Suppose you're going to create a home view. So in this case, save the file as App/Views/Home.php or App/Views/Home/Home.php (whatever you want). <!doctype html> < body > < div class = \"container\" > Welcome </ div > </ body > You can access the view form controller by echo View::View(\"Home/index\"); . Your home controller should look like this: <?php namespace App\\Controllers; use \\Zest\\View\\View; class Home extends \\Zest\\Controller\\Controller { public function index() { echo View::view(\"Home/index\"); } } In the case of passing parameter, it should look like this: $data = ['name' => 'malik']; echo View::View(\"Home/index\",$data); You can access this parameter by: $name = $args['name'];","title":"Creating a View in simple way without a templating engine."},{"location":"master/basics/views/#creating-a-view-in-a-simple-way-with-a-templating-engine","text":"Zest supports a built-in template engine that you can use in simple way. echo View::randerTemplate(\"Home/template.php\",[ 'name' => \"malik\", ]); Use in view file like this: {% name %} It prints \"malik\" on the screen.","title":"Creating a View in a simple way with a templating engine"},{"location":"master/basics/views/#minify-html-files","text":"ZestFramework minifies HTML by default. If you don't want to minify HTML view files, you should passed false argument in view method of the View class First Argument: file name with path like file or path/file. Second Argument: Any parameter that you want to be passed must be in an array. Third Argument: Minify; true => Minify, false => Don't minify. Must be bool . Default value is true .","title":"Minify HTML files"},{"location":"master/components/components/","text":"Component \u00b6 Info Zest Framework supports a component system/feature. What is a component? \u00b6 A component is a piece of code that has its own routes, controllers, models, views, middleware and locals. The structure of components \u00b6 The structure of components is as follows. All components should be in App/Components folder In this example we're going to create helloworld component. The structure is as follow. Components {main component folder} helloworld {sub component folder e.g component name} Controllers {folder contains controllers of component} local {folder contains language files of component} Models {folder contains models of component} Middleware {folder contains middleware of component} Views {folder contains views of component} routes.php {file, where the routes are defined} Let's create a helloworld component. First, add our route in routes.php <?php // namespace is required to define your component so that you can add many routes into one component as well. $namespace = \"App\\Components\\helloworld\\Controllers\" ; // This creates the url `localhost/blog/helloworld`. $com -> add ( 'helloworld' , [ 'controller' => 'Home' , 'action' => 'index' , 'namespace' => $namespace ]); // the helloworld is the component name if you have different component chagne it according to name. Now create our Home.php in controllers folder <?php namespace App\\Components\\hello\\Controllers ; use Zest\\Component\\View\\View ; class Home extends \\Zest\\Component\\Controller\\Controller { /** * Show the index page. * * @return void */ public function index () { //prototype View::view('componentName','View files',$args array (optional)); echo View :: view ( 'helloworld' , 'Home/index' ); //again the word helloworld is our component name } } Then write index.php in the Views/Home folder <!doctype html> < html lang = \"<?= lang(); ?>\" > < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"shortcut icon\" type = \"image/png\" href = \"<?= site_base_url(); ?>/image/logo.png\" /> < link rel = \"stylesheet\" href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\" > < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\" ></ script > < script src = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\" ></ script > < link rel = \"stylesheet\" type = \"text/css\" href = \"<?= site_base_url(); ?>/css/style.css\" > < title > <?= printl('title:home'); ?> </ title > </ head > < body > < div class = 'container-fluid' > < h1 > <?= printc('title:home:hello'); ?> </ h1 > </ div > </ body > </ html > printc() is a built-in function in Zest framework for printing language strings in components. site_base_url() returns the current URL of the site. Now lastly, create our language file en.php in the local folder. <?php return [ 'title:home:hello' => 'Hello World' , ]; Success Congratulations! You have successfully created a component.","title":"Components"},{"location":"master/components/components/#component","text":"Info Zest Framework supports a component system/feature.","title":"Component"},{"location":"master/components/components/#what-is-a-component","text":"A component is a piece of code that has its own routes, controllers, models, views, middleware and locals.","title":"What is a component?"},{"location":"master/components/components/#the-structure-of-components","text":"The structure of components is as follows. All components should be in App/Components folder In this example we're going to create helloworld component. The structure is as follow. Components {main component folder} helloworld {sub component folder e.g component name} Controllers {folder contains controllers of component} local {folder contains language files of component} Models {folder contains models of component} Middleware {folder contains middleware of component} Views {folder contains views of component} routes.php {file, where the routes are defined} Let's create a helloworld component. First, add our route in routes.php <?php // namespace is required to define your component so that you can add many routes into one component as well. $namespace = \"App\\Components\\helloworld\\Controllers\" ; // This creates the url `localhost/blog/helloworld`. $com -> add ( 'helloworld' , [ 'controller' => 'Home' , 'action' => 'index' , 'namespace' => $namespace ]); // the helloworld is the component name if you have different component chagne it according to name. Now create our Home.php in controllers folder <?php namespace App\\Components\\hello\\Controllers ; use Zest\\Component\\View\\View ; class Home extends \\Zest\\Component\\Controller\\Controller { /** * Show the index page. * * @return void */ public function index () { //prototype View::view('componentName','View files',$args array (optional)); echo View :: view ( 'helloworld' , 'Home/index' ); //again the word helloworld is our component name } } Then write index.php in the Views/Home folder <!doctype html> < html lang = \"<?= lang(); ?>\" > < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"shortcut icon\" type = \"image/png\" href = \"<?= site_base_url(); ?>/image/logo.png\" /> < link rel = \"stylesheet\" href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\" > < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\" ></ script > < script src = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\" ></ script > < link rel = \"stylesheet\" type = \"text/css\" href = \"<?= site_base_url(); ?>/css/style.css\" > < title > <?= printl('title:home'); ?> </ title > </ head > < body > < div class = 'container-fluid' > < h1 > <?= printc('title:home:hello'); ?> </ h1 > </ div > </ body > </ html > printc() is a built-in function in Zest framework for printing language strings in components. site_base_url() returns the current URL of the site. Now lastly, create our language file en.php in the local folder. <?php return [ 'title:home:hello' => 'Hello World' , ]; Success Congratulations! You have successfully created a component.","title":"The structure of components"},{"location":"master/frontend/input/","text":"Input \u00b6 Input is the way getting input form users (which is also called form submittion) input helper function \u00b6 input helper function is use to get any http type value its accpet one paramter which is name of field $username = input('username'); Escape helper function \u00b6 The escape helper function is use to clean user input form any type of malicious code its accpet one paramter which is value that you want clean $username = input('username'); $username = escape($username); //OR $name = escape(imput('name'));","title":"Input"},{"location":"master/frontend/input/#input","text":"Input is the way getting input form users (which is also called form submittion)","title":"Input"},{"location":"master/frontend/input/#input-helper-function","text":"input helper function is use to get any http type value its accpet one paramter which is name of field $username = input('username');","title":"input helper function"},{"location":"master/frontend/input/#escape-helper-function","text":"The escape helper function is use to clean user input form any type of malicious code its accpet one paramter which is value that you want clean $username = input('username'); $username = escape($username); //OR $name = escape(imput('name'));","title":"Escape helper function"},{"location":"master/frontend/localization/","text":"Localization \u00b6 Zest's localization features provide a convenient way to retrieve strings in various languages, allowing you to easily support multiple languages within your application. Language strings are stored in files within the App/Locale directory and for components it locate `/Component_Name/Locale. printl function \u00b6 printl function is use to get language string value form language string file (this function isn't work in components) echo printl('home:welcome'); printc function \u00b6 printc function is use to get language string value form language string file only in components echo printc('home:welcome'); Info the language file is locate in Local folder Zest \u00b6 App/Local Components \u00b6 App/Components/{name}/Local {name} refer to component name","title":"Localization"},{"location":"master/frontend/localization/#localization","text":"Zest's localization features provide a convenient way to retrieve strings in various languages, allowing you to easily support multiple languages within your application. Language strings are stored in files within the App/Locale directory and for components it locate `/Component_Name/Locale.","title":"Localization"},{"location":"master/frontend/localization/#printl-function","text":"printl function is use to get language string value form language string file (this function isn't work in components) echo printl('home:welcome');","title":"printl function"},{"location":"master/frontend/localization/#printc-function","text":"printc function is use to get language string value form language string file only in components echo printc('home:welcome'); Info the language file is locate in Local folder","title":"printc function"},{"location":"master/frontend/localization/#zest","text":"App/Local","title":"Zest"},{"location":"master/frontend/localization/#components","text":"App/Components/{name}/Local {name} refer to component name","title":"Components"},{"location":"master/security/encryption/","text":"Encryption \u00b6 Encryption library bundled with Zest. Configuration \u00b6 The default encryption adapter in config file Config/App.php is set openssl Warning You should change encryption your key Encrypt \u00b6 You can encrypt string by calling to encrypt method <?php use Zest\\Encryption\\Encryption ; $encryption = new Encryption ( 'your-key' ); // key is optional //Encrypt the message $encrypt = $encryption -> encrypt ( \"This is a text\" ); echo $encrypt ; Decrypt \u00b6 You can decrypt token by calling decrypt method <?php $encryption = new Encryption ( 'your-key' ); //Decrypt the message $decrypt = $encryption -> decrypt ( $encrypt ); echo $decrypt ; Adapter \u00b6 This Package support two encryption adapter - OpenSSL - Sodium change Adapter \u00b6 You can pass supported adapter to class like Use of sodium <?php $encryption = new Encryption ( 'your-key' , 'sodium' ); Info Sodium php extension is required. Use of openSSL Info The adapter can also be changed from Config/App.php file. <?php $encryption = new Encryption ( 'your-key' , 'openssl' ); Info openSSL php extension is required.","title":"Encrpytion"},{"location":"master/security/encryption/#encryption","text":"Encryption library bundled with Zest.","title":"Encryption"},{"location":"master/security/encryption/#configuration","text":"The default encryption adapter in config file Config/App.php is set openssl Warning You should change encryption your key","title":"Configuration"},{"location":"master/security/encryption/#encrypt","text":"You can encrypt string by calling to encrypt method <?php use Zest\\Encryption\\Encryption ; $encryption = new Encryption ( 'your-key' ); // key is optional //Encrypt the message $encrypt = $encryption -> encrypt ( \"This is a text\" ); echo $encrypt ;","title":"Encrypt"},{"location":"master/security/encryption/#decrypt","text":"You can decrypt token by calling decrypt method <?php $encryption = new Encryption ( 'your-key' ); //Decrypt the message $decrypt = $encryption -> decrypt ( $encrypt ); echo $decrypt ;","title":"Decrypt"},{"location":"master/security/encryption/#adapter","text":"This Package support two encryption adapter - OpenSSL - Sodium","title":"Adapter"},{"location":"master/security/encryption/#change-adapter","text":"You can pass supported adapter to class like Use of sodium <?php $encryption = new Encryption ( 'your-key' , 'sodium' ); Info Sodium php extension is required. Use of openSSL Info The adapter can also be changed from Config/App.php file. <?php $encryption = new Encryption ( 'your-key' , 'openssl' ); Info openSSL php extension is required.","title":"change Adapter"},{"location":"master/security/hashing/","text":"Hashing \u00b6 This Package provides secure Bcrypt and Argon2 hashing for storing user passwords. Warning The Argon2i driver requires PHP 7.2.0 or greater and the Argon2id driver requires PHP 7.3.0 or greater. Configuration \u00b6 Info Bcrypt is a great choice for hashing passwords because its \"work factor\" is adjustable, which means that the time it takes to generate a hash can be increased as hardware power increases. There are few other config option are availabe cost option for bcrypt adapter, memory , thread and time for argon's . Basic Usage \u00b6 You may hash a password by calling the make method on the Hashing Class: <?php use Zest\\Hashing\\Hashing ; $hashing = new Hashing (); //Original password $password = 123456 ; //Hash the password $password_hash = $hashing -> make ( $password ); echo $password_hash ; Adjusting The Bcrypt Work Factor \u00b6 If you are using the Bcrypt algorithm, the make method allows you to manage the work factor of the algorithm using the cost option: $hashing = new Hashing('bcrypt'); $password_hash = $hashing->make($password, [ 'cost' => 12 ]); Adjusting The Argon2 Work Factor \u00b6 If you are using the Argon2I or Argon2Id algorithm, the make method allows you to manage the work factor of the algorithm using the memory, time, and threads options: $hashing = new Hashing('argon2i'); $password_hash = $hashing->make($password, [ 'memory' => 1024, 'time' => 2, 'threads' => 2, ]); Info For more information on these options, check out the official PHP documentation . Verifying A Password Against A Hash \u00b6 The verify method allows you to verify that a given plain-text string corresponds to a given hash if ($hashing->verify($password,$password_hash)) { //The password matched. } Checking If A Password Needs To Be Rehashed \u00b6 The needsRehash function allows you to determine if the work factor used by the hashing has changed since the password was hashed: if ($hashing->needsRehash($hashed)) { $password_hash = $hashing->make($password); } Supported algorithm \u00b6 in this library three algorithm are supported - Bcrypt - Argon2I - Argon2ID Switch between algorithm \u00b6 $hashing = new Hashing('supported-algorithm'); $bvcryptHashing = new Hashing('bcrypt'); Default work factors \u00b6 You can provide default work factors like //Argon2 $argon2Hashing = new Hashing('argon2i',[ 'memory' => 1024, 'time' => 2, 'threads' => 2, 'verify' => false, ]); //Bcrypt $vcryptHashing = new Hashing('bcrypt'[ 'cost' => 12, 'verify' => false, ]); here verify option is additional indicate that if this set to true the algorithm is also sticky check on verify, if both algorithm are not matched then means password is not correct.","title":"Hashing"},{"location":"master/security/hashing/#hashing","text":"This Package provides secure Bcrypt and Argon2 hashing for storing user passwords. Warning The Argon2i driver requires PHP 7.2.0 or greater and the Argon2id driver requires PHP 7.3.0 or greater.","title":"Hashing"},{"location":"master/security/hashing/#configuration","text":"Info Bcrypt is a great choice for hashing passwords because its \"work factor\" is adjustable, which means that the time it takes to generate a hash can be increased as hardware power increases. There are few other config option are availabe cost option for bcrypt adapter, memory , thread and time for argon's .","title":"Configuration"},{"location":"master/security/hashing/#basic-usage","text":"You may hash a password by calling the make method on the Hashing Class: <?php use Zest\\Hashing\\Hashing ; $hashing = new Hashing (); //Original password $password = 123456 ; //Hash the password $password_hash = $hashing -> make ( $password ); echo $password_hash ;","title":"Basic Usage"},{"location":"master/security/hashing/#adjusting-the-bcrypt-work-factor","text":"If you are using the Bcrypt algorithm, the make method allows you to manage the work factor of the algorithm using the cost option: $hashing = new Hashing('bcrypt'); $password_hash = $hashing->make($password, [ 'cost' => 12 ]);","title":"Adjusting The Bcrypt Work Factor"},{"location":"master/security/hashing/#adjusting-the-argon2-work-factor","text":"If you are using the Argon2I or Argon2Id algorithm, the make method allows you to manage the work factor of the algorithm using the memory, time, and threads options: $hashing = new Hashing('argon2i'); $password_hash = $hashing->make($password, [ 'memory' => 1024, 'time' => 2, 'threads' => 2, ]); Info For more information on these options, check out the official PHP documentation .","title":"Adjusting The Argon2 Work Factor"},{"location":"master/security/hashing/#verifying-a-password-against-a-hash","text":"The verify method allows you to verify that a given plain-text string corresponds to a given hash if ($hashing->verify($password,$password_hash)) { //The password matched. }","title":"Verifying A Password Against A Hash"},{"location":"master/security/hashing/#checking-if-a-password-needs-to-be-rehashed","text":"The needsRehash function allows you to determine if the work factor used by the hashing has changed since the password was hashed: if ($hashing->needsRehash($hashed)) { $password_hash = $hashing->make($password); }","title":"Checking If A Password Needs To Be Rehashed"},{"location":"master/security/hashing/#supported-algorithm","text":"in this library three algorithm are supported - Bcrypt - Argon2I - Argon2ID","title":"Supported algorithm"},{"location":"master/security/hashing/#switch-between-algorithm","text":"$hashing = new Hashing('supported-algorithm'); $bvcryptHashing = new Hashing('bcrypt');","title":"Switch between algorithm"},{"location":"master/security/hashing/#default-work-factors","text":"You can provide default work factors like //Argon2 $argon2Hashing = new Hashing('argon2i',[ 'memory' => 1024, 'time' => 2, 'threads' => 2, 'verify' => false, ]); //Bcrypt $vcryptHashing = new Hashing('bcrypt'[ 'cost' => 12, 'verify' => false, ]); here verify option is additional indicate that if this set to true the algorithm is also sticky check on verify, if both algorithm are not matched then means password is not correct.","title":"Default work factors"},{"location":"v2.0.3/","text":"Zest Framework 2.0.3 \u00b6 Welcome to Zest! Zest is a very light-weight PHP framework without any dependencies except core and autoloader. Who is Zest For? \u00b6 Zest is for PHP developers who want to build apps instead of coding common things like validation, routing, database manipulation, etc, from scratch. Zest offers a set of well-defined toolkits that take care of those things allowing you to focus on building your app. The purpose of Zest Framework \u00b6 As for PHP, there are many PHP frameworks available nowadays, so the question is raised as to why we/people should use ZestFramework. The main purpose of Zest framework is to provide a very lightweight framework without any external dependencies except core and autoloader. Zest Framework consists of two dependencies. \u00b6 Core \u00b6 Core files contains all the necessary files that are required for Zest framework to work properly (e.g., routing, validating, etc). Autoloader \u00b6 Composer autoloader is used for autoloading files. It's necessary as a means to to load files efficiently. We use Composer autoloader for loading files. Useful info: \u00b6 The size of Zest core files less then 1MB. Previous Versions \u00b6 Docs for Version 2.0.2","title":"Home"},{"location":"v2.0.3/#zest-framework-203","text":"Welcome to Zest! Zest is a very light-weight PHP framework without any dependencies except core and autoloader.","title":"Zest Framework 2.0.3"},{"location":"v2.0.3/#who-is-zest-for","text":"Zest is for PHP developers who want to build apps instead of coding common things like validation, routing, database manipulation, etc, from scratch. Zest offers a set of well-defined toolkits that take care of those things allowing you to focus on building your app.","title":"Who is Zest For?"},{"location":"v2.0.3/#the-purpose-of-zest-framework","text":"As for PHP, there are many PHP frameworks available nowadays, so the question is raised as to why we/people should use ZestFramework. The main purpose of Zest framework is to provide a very lightweight framework without any external dependencies except core and autoloader.","title":"The purpose of Zest Framework"},{"location":"v2.0.3/#zest-framework-consists-of-two-dependencies","text":"","title":"Zest Framework consists of two dependencies."},{"location":"v2.0.3/#core","text":"Core files contains all the necessary files that are required for Zest framework to work properly (e.g., routing, validating, etc).","title":"Core"},{"location":"v2.0.3/#autoloader","text":"Composer autoloader is used for autoloading files. It's necessary as a means to to load files efficiently. We use Composer autoloader for loading files.","title":"Autoloader"},{"location":"v2.0.3/#useful-info","text":"The size of Zest core files less then 1MB.","title":"Useful info:"},{"location":"v2.0.3/#previous-versions","text":"Docs for Version 2.0.2","title":"Previous Versions"},{"location":"v2.0.3/UPGRADE-2.0.2/","text":"Upgrade FROM 2.0.2 \u00b6 Upgrade core file \u00b6 You can upgrade core files by running the command: composer update This command will automatically upgrade the core files of Zest framework. Upgrade Zest files \u00b6 Upgrading the Zest file to 2.0.3 is easy You need to replace config files https://github.com/Softhub99/Zest/tree/2.0.3/Config Config (replace) Database.php (replace) Dependencies.php Congrulation you have successfully upgrade to version 2.0.3 What's new in this update \u00b6 Supports for RESTs routes in router class and components Update Dependency Injection Update Mysql class (remove extra comments) Update files class (add : 'application/x-zip-compressed' mine type) Update validation class (fix issue undefine constant) Update auth -signin class fix issue sending verifcation email again & again Update input class (fix typo) Update helpers.php fix bugs (add function restore_line_break()) Add addRoutes method in router class and in component for adding multiple routers at a time Adding supports Controller@method in routes","title":"Upgrade Form 2.0.2"},{"location":"v2.0.3/UPGRADE-2.0.2/#upgrade-from-202","text":"","title":"Upgrade FROM 2.0.2"},{"location":"v2.0.3/UPGRADE-2.0.2/#upgrade-core-file","text":"You can upgrade core files by running the command: composer update This command will automatically upgrade the core files of Zest framework.","title":"Upgrade core file"},{"location":"v2.0.3/UPGRADE-2.0.2/#upgrade-zest-files","text":"Upgrading the Zest file to 2.0.3 is easy You need to replace config files https://github.com/Softhub99/Zest/tree/2.0.3/Config Config (replace) Database.php (replace) Dependencies.php Congrulation you have successfully upgrade to version 2.0.3","title":"Upgrade Zest files"},{"location":"v2.0.3/UPGRADE-2.0.2/#whats-new-in-this-update","text":"Supports for RESTs routes in router class and components Update Dependency Injection Update Mysql class (remove extra comments) Update files class (add : 'application/x-zip-compressed' mine type) Update validation class (fix issue undefine constant) Update auth -signin class fix issue sending verifcation email again & again Update input class (fix typo) Update helpers.php fix bugs (add function restore_line_break()) Add addRoutes method in router class and in component for adding multiple routers at a time Adding supports Controller@method in routes","title":"What's new in this update"},{"location":"v2.0.3/auth/","text":"Auth Management library bundled with Zest Framework Auth Management \u00b6 Configuration \u00b6 There is configuration need for using Auth Management library in zest framework open - Config/Auth.php /** * Auth database table. * * @var string */ const AUTH_DB_TABLE = 'users'; /** * Auth database name. * * @var string */ const AUTH_DB_NAME = 'zestweb'; /** * Auth default verification link. * * @var string */ const VERIFICATION_LINK = '/account/verify/'; /** * Auth default verification link. * * @var string */ const RESET_PASSWORD_LINK = '/account/reset/password'; /** * is send email over smtp. * * @var string */ const IS_SMTP = false; /** * is user need to verify email. * * @var string */ const IS_VERIFY_EMAIL = false; /** * sticky password. * * @var string */ const STICKY_PASSWORD = false; /** * Defaults auth errors msgs. * * @var array */ const AUTH_ERRORS = [ 'password_confitm' => 'Password much be matched', 'username_not_exist' => 'Sorry, the username does not exists', 'email_not_exist' => 'Sorry, the email does not exists', 'password_match' => 'Password does not matched', 'sticky_password' => 'Password much be greate then 6 much contain lowercase,uppercase and special character', 'account_verify' => 'You should verify your account in order to login, another verification is sended to your email addresss', 'already_login' => 'Account already loggedin', 'need_login' => 'You need login to your account in order to update profile', 'token' => 'Invilid request', ]; /** * Defaults auth success msgs. * * @var array */ const SUCCESS = [ 'signin' => 'Login successfully', 'signup' => 'Your account has been created successfully', 'update' => 'Your account has been updated', 'update_password' => 'Your password has been updated', 'verified' => 'Your account verified login now to enjoy in our services', 'reset' => 'Password reset request has been sended to your email', ]; /** * Defaults auth email subjects. * * @var array */ const AUTH_SUBJECTS = [ 'need_verify' => 'Account verification required', 'verified' => 'Account verified', 'reset' => 'Password reset request', ]; /** * Defaults auth email bodies. * * @var array */ const AUTH_MAIL_BODIES = [ 'need_verify' => 'Dear :email your account has been created you need verify your account<br><a href=\":link\">verify my account</a><br>Click above link if you unable to open copy paste below link <br>:link', 'reset' => 'Dear :email We recieve password reset request form your account reset your password now<br><a href=\":link\">reset my password</a><br>Click above link if you unable to open copy paste below link <br>:link', 'verified' => 'Dear :email your account verified login now to enjoy in our services', ]; Change this configuration according to your requirement. Default Database Structure \u00b6 required fields - username - email - password - salts - token - resetToken (for allow reset password) Lets create simple auth app in Zest Framework \u00b6 Required routes \u00b6 // Add the routes //create url: yoursite.com $router->get('',\"Home@index\"); //Account //create url: yoursite.com/acount/login $router->get('account/login',\"Account@login\"); //create url: yoursite.com/acount/login/action $router->post('account/login/action',\"Account@loginProcess\"); //create url: yoursite.com/acount/signup $router->get('account/signup', \"Account@signup\"); //create url: yoursite.com/acount/signup/action $router->post('account/signup/action', \"Account@signupProcess\"); //create url: yoursite.com/acount/logout $router->get('account/logout', \"Account@logout\"); //create url: yoursite.com/@username $router->get('{username:@([a-zA-Z0-9])+}', \"Account@profileView\"); //create url: yoursite.com/acount/profile/edit $router->get('account/profile/edit', \"Account@profileEdit\"); //create url: yoursite.com/acount/update/action $router->post('account/update/action', \"Account@profileUpdate\"); //create url: yoursite.com/acount/update/bio/action $router->post('account/update/bio/action', \"Account@profileBioUpdate\"); //create url: yoursite.com/acount/update/password/action $router->post('account/update/password/action', \"Account@profilePasswordUpdate\"); //create url: yoursite.com/acount/reset $router->get('account/reset', \"Account@reset\"); //create url: yoursite.com/acount/reset/action $router->post('account/reset/action',\"Account@resetProcess\"); //create url: yoursite.com/acount/reset/password/$token $router->get('account/reset/password/{token:[A-Za-z0-9]+}', \"Account@resetPassword\"); //create url: yoursite.com/account/reset/password-password/process $router->post('account/reset/password-password/process', \"Account@resetPasswordProcess\"); Required Controller \u00b6 Home Controller \u00b6 <?php namespace App\\Controllers ; //for using View use Zest\\View\\View ; //for using auth management use Zest\\Auth\\Auth ; use Zest\\Auth\\User ; class Home extends \\Zest\\Controller\\Controller { /** * Show the index page. * * @return void */ public function index () { $user = new User ; // in Auth user class there is method isLogin to check is user login or not if ( $user -> isLogin ()) { // in Auth user class there is method loginUser that return the login user array $args = $user -> loginUser (); View :: View ( 'account/profile' , $args [ 0 ]); } else { View :: view ( 'account/signup' ); } } } Account Controller \u00b6 <?php namespace App\\Controllers ; //for using View use Zest\\View\\View ; //for using auth use Zest\\Auth\\Auth ; use Zest\\Auth\\User ; class Account extends \\Zest\\Controller\\Controller { // Check whether the user is logged in. public function isLogin () { $user = new User ; // In the `Auth` user class there is a method, `isLogin`, which checks whether the user is logged in. if ( $user -> isLogin ()) { // Redirect() is built-in function in Zest framework for redirecting to another page. redirect ( site_base_url () . \"account/profile/edit\" ); } } // User login form public function login () { $this -> isLogin (); // Loading the view form View :: view ( \"account/login\" ); } // Process the login request/action public function loginProcess () { $this -> isLogin (); // Getting the user value // Using the built-in input function // Escape function cleans the input for escaping $username = escape ( input ( 'username' )); $password = escape ( input ( 'password' )); $auth = new Auth ; //Call the auth signin method accpet two arguments // username and password $auth -> signin () -> signin ( $username , $password ); //check if there is error if ( $auth -> fail ()) { // if yes, get the error $errors = $auth -> error () -> get (); //loop throught the error foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { //if no error print 1 on screen means true echo '1' ; } } // Signup form public function signup () { $this -> isLogin (); //Load the signup form View :: view ( \"account/signup\" ); } public function signupProcess () { $this -> isLogin (); //Getting the user value // using builtin input function //escape function clean the input for escaping $name = escape ( input ( 'name' )); $username = escape ( input ( 'username' )); $email = escape ( input ( 'email' )); $password = escape ( input ( 'password' )); $confirm = escape ( input ( 'confirm' )); $auth = new Auth ; //Signup method accpet the three required arguments // $username,$email and password //Fourth array argument is optional you can provide many fields in fourth argument if want $auth -> signup () -> signup ( $username , $email , $password ,[ 'name' => $name , 'passConfirm' => $confirm , 'role' => 'normal' , 'ip' => ( new \\Zest\\UserInfo\\UserInfo ) -> ip ()]); //check if there is error if ( $auth -> fail ()) { // if yes, get the error $errors = $auth -> error () -> get (); //loop throught the error foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { // If no error print successfull message echo 'Your account has been created login to enjoy in our services' ; } } // Logout the users public function logout () { $auth = new Auth ; // Call the logout method in auth class $auth -> logout (); //redirect the user to login page back redirect ( site_base_url () . \"account/login\" ); } public function profileEdit () { $user = new User ; if ( $user -> isLogin ()) { $args = $user -> loginUser (); //profile edit form View :: View ( 'account/profile' , $args [ 0 ]); } else { View :: view ( 'errors/404' ); } } public function profileUpdate () { $user = new User ; $error = false ; $name = escape ( input ( 'name' )); $username = escape ( input ( 'username' )); $email = escape ( input ( 'email' )); //check if username is already exists if ( $user -> isUsername ( $username )) { $error = true ; echo \"Sorry, { $username } username already exists, try another\" ; } //check if email is already exists if ( $user -> isEmail ( $email )) { $error = true ; echo \"Sorry, { $email } email already exists, try another\" ; } if ( $error !== true ) { $auth = new Auth ; $id = $user -> loginUser ()[ 0 ][ 'id' ]; //update the user details $auth -> update () -> update ([ 'name' => $name , 'username' => $username , 'email' => $email ], $id ); if ( $auth -> fail ()) { $errors = $auth -> error () -> get (); foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { echo 'Your account has been updated successfully' ; } } } public function profileBioUpdate () { $user = new User ; $bio = escape ( input ( 'bio' )); $auth = new Auth ; //get id of login user $id = $user -> loginUser ()[ 0 ][ 'id' ]; //update bio of user $auth -> update () -> update ([ 'bio' => $bio ], $id ); if ( $auth -> fail ()) { $errors = $auth -> error () -> get (); foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { echo 'Your account bio has been updated successfully' ; } } public function profilePasswordUpdate () { $user = new User ; $password = escape ( input ( 'password' )); $confirm = escape ( input ( 'confirm' )); $auth = new Auth ; //get id of login user $id = $user -> loginUser ()[ 0 ][ 'id' ]; //Update the password $auth -> update () -> updatePassword ( $password , $confirm , $id ); if ( $auth -> fail ()) { $errors = $auth -> error () -> get (); foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { echo 'Your account password has been updated successfully' ; } } public function profileView () { $username = $this -> route_params [ 'username' ]; $username = str_replace ( \"@\" , '' , $username ); $user = new User ; if ( $user -> isUsername ( $username )) { $args = $user -> getByWhere ( 'username' , $username ); //profile view View :: view ( 'account/profileView' , $args [ 0 ]); } else { View :: view ( 'errors/404' ); } } //Reset password form where user enter his email public function reset () { // Load the reset form //Create your form that should email and one buttom View :: view ( \"account/reset\" ); } //Reset password process public function resetProcess () { $auth = new Auth ; // reset the password $auth -> reset () -> reset ( input ( 'email' )); if ( $auth -> fail ()) { $errors = $auth -> error () -> get (); foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { echo 'Your Password reset request has been recieved check your email' ; } } public function resetPassword () { $token = $this -> route_params [ 'token' ]; $user = new User ; //check if reset token is exists if ( $user -> isResetToken ( $token )) { $args = [ 'token' => $token ]; View :: view ( \"account/reset_password\" , $args ); } else { View :: view ( \"errors/404\" ); } } public function resetPasswordProcess () { $password = input ( 'password' ); $confirm = input ( 'confirm' ); $token = input ( 'token' ); $user = new User ; //get the user id by resetToken $id = $user -> getByWhere ( 'resetToken' , $token )[ 0 ][ 'id' ]; $auth = new Auth ; //update the user password $auth -> update () -> updatePassword ( $password , $confirm , $id ); if ( $auth -> fail ()) { $errors = $auth -> error () -> get (); foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { $auth -> update () -> update ([ 'resetToken' => 'NULL' ], $id ); echo \"Password update successfully \" ; } } } In the account controller we called method form auth management View \u00b6 Create view yourself or download files form here https://github.com/Lablnet/Zest-Auth-App/tree/master/App/Views and download required css/js or image files form here https://github.com/Lablnet/Zest-Auth-App/tree/master/Public the folder structure should be same. Source code \u00b6 The source code of this available in github feel free to download and contribute https://github.com/Lablnet/Zest-Auth-App","title":"Auth"},{"location":"v2.0.3/auth/#auth-management","text":"","title":"Auth Management"},{"location":"v2.0.3/auth/#configuration","text":"There is configuration need for using Auth Management library in zest framework open - Config/Auth.php /** * Auth database table. * * @var string */ const AUTH_DB_TABLE = 'users'; /** * Auth database name. * * @var string */ const AUTH_DB_NAME = 'zestweb'; /** * Auth default verification link. * * @var string */ const VERIFICATION_LINK = '/account/verify/'; /** * Auth default verification link. * * @var string */ const RESET_PASSWORD_LINK = '/account/reset/password'; /** * is send email over smtp. * * @var string */ const IS_SMTP = false; /** * is user need to verify email. * * @var string */ const IS_VERIFY_EMAIL = false; /** * sticky password. * * @var string */ const STICKY_PASSWORD = false; /** * Defaults auth errors msgs. * * @var array */ const AUTH_ERRORS = [ 'password_confitm' => 'Password much be matched', 'username_not_exist' => 'Sorry, the username does not exists', 'email_not_exist' => 'Sorry, the email does not exists', 'password_match' => 'Password does not matched', 'sticky_password' => 'Password much be greate then 6 much contain lowercase,uppercase and special character', 'account_verify' => 'You should verify your account in order to login, another verification is sended to your email addresss', 'already_login' => 'Account already loggedin', 'need_login' => 'You need login to your account in order to update profile', 'token' => 'Invilid request', ]; /** * Defaults auth success msgs. * * @var array */ const SUCCESS = [ 'signin' => 'Login successfully', 'signup' => 'Your account has been created successfully', 'update' => 'Your account has been updated', 'update_password' => 'Your password has been updated', 'verified' => 'Your account verified login now to enjoy in our services', 'reset' => 'Password reset request has been sended to your email', ]; /** * Defaults auth email subjects. * * @var array */ const AUTH_SUBJECTS = [ 'need_verify' => 'Account verification required', 'verified' => 'Account verified', 'reset' => 'Password reset request', ]; /** * Defaults auth email bodies. * * @var array */ const AUTH_MAIL_BODIES = [ 'need_verify' => 'Dear :email your account has been created you need verify your account<br><a href=\":link\">verify my account</a><br>Click above link if you unable to open copy paste below link <br>:link', 'reset' => 'Dear :email We recieve password reset request form your account reset your password now<br><a href=\":link\">reset my password</a><br>Click above link if you unable to open copy paste below link <br>:link', 'verified' => 'Dear :email your account verified login now to enjoy in our services', ]; Change this configuration according to your requirement.","title":"Configuration"},{"location":"v2.0.3/auth/#default-database-structure","text":"required fields - username - email - password - salts - token - resetToken (for allow reset password)","title":"Default Database Structure"},{"location":"v2.0.3/auth/#lets-create-simple-auth-app-in-zest-framework","text":"","title":"Lets create simple auth app in Zest Framework"},{"location":"v2.0.3/auth/#required-routes","text":"// Add the routes //create url: yoursite.com $router->get('',\"Home@index\"); //Account //create url: yoursite.com/acount/login $router->get('account/login',\"Account@login\"); //create url: yoursite.com/acount/login/action $router->post('account/login/action',\"Account@loginProcess\"); //create url: yoursite.com/acount/signup $router->get('account/signup', \"Account@signup\"); //create url: yoursite.com/acount/signup/action $router->post('account/signup/action', \"Account@signupProcess\"); //create url: yoursite.com/acount/logout $router->get('account/logout', \"Account@logout\"); //create url: yoursite.com/@username $router->get('{username:@([a-zA-Z0-9])+}', \"Account@profileView\"); //create url: yoursite.com/acount/profile/edit $router->get('account/profile/edit', \"Account@profileEdit\"); //create url: yoursite.com/acount/update/action $router->post('account/update/action', \"Account@profileUpdate\"); //create url: yoursite.com/acount/update/bio/action $router->post('account/update/bio/action', \"Account@profileBioUpdate\"); //create url: yoursite.com/acount/update/password/action $router->post('account/update/password/action', \"Account@profilePasswordUpdate\"); //create url: yoursite.com/acount/reset $router->get('account/reset', \"Account@reset\"); //create url: yoursite.com/acount/reset/action $router->post('account/reset/action',\"Account@resetProcess\"); //create url: yoursite.com/acount/reset/password/$token $router->get('account/reset/password/{token:[A-Za-z0-9]+}', \"Account@resetPassword\"); //create url: yoursite.com/account/reset/password-password/process $router->post('account/reset/password-password/process', \"Account@resetPasswordProcess\");","title":"Required routes"},{"location":"v2.0.3/auth/#required-controller","text":"","title":"Required Controller"},{"location":"v2.0.3/auth/#home-controller","text":"<?php namespace App\\Controllers ; //for using View use Zest\\View\\View ; //for using auth management use Zest\\Auth\\Auth ; use Zest\\Auth\\User ; class Home extends \\Zest\\Controller\\Controller { /** * Show the index page. * * @return void */ public function index () { $user = new User ; // in Auth user class there is method isLogin to check is user login or not if ( $user -> isLogin ()) { // in Auth user class there is method loginUser that return the login user array $args = $user -> loginUser (); View :: View ( 'account/profile' , $args [ 0 ]); } else { View :: view ( 'account/signup' ); } } }","title":"Home Controller"},{"location":"v2.0.3/auth/#account-controller","text":"<?php namespace App\\Controllers ; //for using View use Zest\\View\\View ; //for using auth use Zest\\Auth\\Auth ; use Zest\\Auth\\User ; class Account extends \\Zest\\Controller\\Controller { // Check whether the user is logged in. public function isLogin () { $user = new User ; // In the `Auth` user class there is a method, `isLogin`, which checks whether the user is logged in. if ( $user -> isLogin ()) { // Redirect() is built-in function in Zest framework for redirecting to another page. redirect ( site_base_url () . \"account/profile/edit\" ); } } // User login form public function login () { $this -> isLogin (); // Loading the view form View :: view ( \"account/login\" ); } // Process the login request/action public function loginProcess () { $this -> isLogin (); // Getting the user value // Using the built-in input function // Escape function cleans the input for escaping $username = escape ( input ( 'username' )); $password = escape ( input ( 'password' )); $auth = new Auth ; //Call the auth signin method accpet two arguments // username and password $auth -> signin () -> signin ( $username , $password ); //check if there is error if ( $auth -> fail ()) { // if yes, get the error $errors = $auth -> error () -> get (); //loop throught the error foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { //if no error print 1 on screen means true echo '1' ; } } // Signup form public function signup () { $this -> isLogin (); //Load the signup form View :: view ( \"account/signup\" ); } public function signupProcess () { $this -> isLogin (); //Getting the user value // using builtin input function //escape function clean the input for escaping $name = escape ( input ( 'name' )); $username = escape ( input ( 'username' )); $email = escape ( input ( 'email' )); $password = escape ( input ( 'password' )); $confirm = escape ( input ( 'confirm' )); $auth = new Auth ; //Signup method accpet the three required arguments // $username,$email and password //Fourth array argument is optional you can provide many fields in fourth argument if want $auth -> signup () -> signup ( $username , $email , $password ,[ 'name' => $name , 'passConfirm' => $confirm , 'role' => 'normal' , 'ip' => ( new \\Zest\\UserInfo\\UserInfo ) -> ip ()]); //check if there is error if ( $auth -> fail ()) { // if yes, get the error $errors = $auth -> error () -> get (); //loop throught the error foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { // If no error print successfull message echo 'Your account has been created login to enjoy in our services' ; } } // Logout the users public function logout () { $auth = new Auth ; // Call the logout method in auth class $auth -> logout (); //redirect the user to login page back redirect ( site_base_url () . \"account/login\" ); } public function profileEdit () { $user = new User ; if ( $user -> isLogin ()) { $args = $user -> loginUser (); //profile edit form View :: View ( 'account/profile' , $args [ 0 ]); } else { View :: view ( 'errors/404' ); } } public function profileUpdate () { $user = new User ; $error = false ; $name = escape ( input ( 'name' )); $username = escape ( input ( 'username' )); $email = escape ( input ( 'email' )); //check if username is already exists if ( $user -> isUsername ( $username )) { $error = true ; echo \"Sorry, { $username } username already exists, try another\" ; } //check if email is already exists if ( $user -> isEmail ( $email )) { $error = true ; echo \"Sorry, { $email } email already exists, try another\" ; } if ( $error !== true ) { $auth = new Auth ; $id = $user -> loginUser ()[ 0 ][ 'id' ]; //update the user details $auth -> update () -> update ([ 'name' => $name , 'username' => $username , 'email' => $email ], $id ); if ( $auth -> fail ()) { $errors = $auth -> error () -> get (); foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { echo 'Your account has been updated successfully' ; } } } public function profileBioUpdate () { $user = new User ; $bio = escape ( input ( 'bio' )); $auth = new Auth ; //get id of login user $id = $user -> loginUser ()[ 0 ][ 'id' ]; //update bio of user $auth -> update () -> update ([ 'bio' => $bio ], $id ); if ( $auth -> fail ()) { $errors = $auth -> error () -> get (); foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { echo 'Your account bio has been updated successfully' ; } } public function profilePasswordUpdate () { $user = new User ; $password = escape ( input ( 'password' )); $confirm = escape ( input ( 'confirm' )); $auth = new Auth ; //get id of login user $id = $user -> loginUser ()[ 0 ][ 'id' ]; //Update the password $auth -> update () -> updatePassword ( $password , $confirm , $id ); if ( $auth -> fail ()) { $errors = $auth -> error () -> get (); foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { echo 'Your account password has been updated successfully' ; } } public function profileView () { $username = $this -> route_params [ 'username' ]; $username = str_replace ( \"@\" , '' , $username ); $user = new User ; if ( $user -> isUsername ( $username )) { $args = $user -> getByWhere ( 'username' , $username ); //profile view View :: view ( 'account/profileView' , $args [ 0 ]); } else { View :: view ( 'errors/404' ); } } //Reset password form where user enter his email public function reset () { // Load the reset form //Create your form that should email and one buttom View :: view ( \"account/reset\" ); } //Reset password process public function resetProcess () { $auth = new Auth ; // reset the password $auth -> reset () -> reset ( input ( 'email' )); if ( $auth -> fail ()) { $errors = $auth -> error () -> get (); foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { echo 'Your Password reset request has been recieved check your email' ; } } public function resetPassword () { $token = $this -> route_params [ 'token' ]; $user = new User ; //check if reset token is exists if ( $user -> isResetToken ( $token )) { $args = [ 'token' => $token ]; View :: view ( \"account/reset_password\" , $args ); } else { View :: view ( \"errors/404\" ); } } public function resetPasswordProcess () { $password = input ( 'password' ); $confirm = input ( 'confirm' ); $token = input ( 'token' ); $user = new User ; //get the user id by resetToken $id = $user -> getByWhere ( 'resetToken' , $token )[ 0 ][ 'id' ]; $auth = new Auth ; //update the user password $auth -> update () -> updatePassword ( $password , $confirm , $id ); if ( $auth -> fail ()) { $errors = $auth -> error () -> get (); foreach ( $errors as $error ) { if ( is_array ( $error )) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } else { echo $error . \"<br>\" ; } } } else { $auth -> update () -> update ([ 'resetToken' => 'NULL' ], $id ); echo \"Password update successfully \" ; } } } In the account controller we called method form auth management","title":"Account Controller"},{"location":"v2.0.3/auth/#view","text":"Create view yourself or download files form here https://github.com/Lablnet/Zest-Auth-App/tree/master/App/Views and download required css/js or image files form here https://github.com/Lablnet/Zest-Auth-App/tree/master/Public the folder structure should be same.","title":"View"},{"location":"v2.0.3/auth/#source-code","text":"The source code of this available in github feel free to download and contribute https://github.com/Lablnet/Zest-Auth-App","title":"Source code"},{"location":"v2.0.3/component/","text":"Component \u00b6 Zest Framework supports a component system/feature. What is a component? \u00b6 A component is a piece of code that has its own routes, controllers, models, views, middleware and locals. The structure of components \u00b6 The structure of components is as follows. All components should be in App/Components folder In this example we're going to create helloworld component. The structure is as follow. Components {main component folder} helloworld {sub component folder e.g component name} Controllers {folder contains controllers of component} local {folder contains language files of component} Models {folder contains models of component} Middleware {folder contains middleware of component} Views {folder contains views of component} routes.php {file, where the routes are defined} Let's create a helloworld component. First, add our route in routes.php <?php // namespace is required to define your component so that you can add many routes into one component as well. $namespace = \"App\\Components\\helloworld\\Controllers\" ; // This creates the url `localhost/blog/helloworld`. $com -> add ( 'helloworld' , [ 'controller' => 'Home' , 'action' => 'index' , 'namespace' => $namespace ]); // the helloworld is the component name if you have different component chagne it according to name. Now create our Home.php in controllers folder <?php namespace App\\Components\\hello\\Controllers ; use Zest\\Component\\View\\View ; class Home extends \\Zest\\Component\\Controller\\Controller { /** * Show the index page. * * @return void */ public function index () { //prototype View::view('componentName','View files',$args array (optional)); echo View :: view ( 'helloworld' , 'Home/index' ); //again the word helloworld is our component name } } Then write index.php in the Views/Home folder <!doctype html> < html lang = \"<?= lang(); ?>\" > < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"shortcut icon\" type = \"image/png\" href = \"<?= site_base_url(); ?>/image/logo.png\" /> < link rel = \"stylesheet\" href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\" > < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\" ></ script > < script src = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\" ></ script > < link rel = \"stylesheet\" type = \"text/css\" href = \"<?= site_base_url(); ?>/css/style.css\" > < title > <?= printl('title:home'); ?> </ title > </ head > < body > < div class = 'container-fluid' > < h1 > <?= printc('title:home:hello'); ?> </ h1 > </ div > </ body > </ html > printc() is a built-in function in Zest framework for printing language strings in components. site_base_url() returns the current URL of the site. Now lastly, create our language file en.php in the local folder. <?php return [ 'title:home:hello' => 'Hello World' , ]; Congratulations! You have successfully created a component.","title":"Components"},{"location":"v2.0.3/component/#component","text":"Zest Framework supports a component system/feature.","title":"Component"},{"location":"v2.0.3/component/#what-is-a-component","text":"A component is a piece of code that has its own routes, controllers, models, views, middleware and locals.","title":"What is a component?"},{"location":"v2.0.3/component/#the-structure-of-components","text":"The structure of components is as follows. All components should be in App/Components folder In this example we're going to create helloworld component. The structure is as follow. Components {main component folder} helloworld {sub component folder e.g component name} Controllers {folder contains controllers of component} local {folder contains language files of component} Models {folder contains models of component} Middleware {folder contains middleware of component} Views {folder contains views of component} routes.php {file, where the routes are defined} Let's create a helloworld component. First, add our route in routes.php <?php // namespace is required to define your component so that you can add many routes into one component as well. $namespace = \"App\\Components\\helloworld\\Controllers\" ; // This creates the url `localhost/blog/helloworld`. $com -> add ( 'helloworld' , [ 'controller' => 'Home' , 'action' => 'index' , 'namespace' => $namespace ]); // the helloworld is the component name if you have different component chagne it according to name. Now create our Home.php in controllers folder <?php namespace App\\Components\\hello\\Controllers ; use Zest\\Component\\View\\View ; class Home extends \\Zest\\Component\\Controller\\Controller { /** * Show the index page. * * @return void */ public function index () { //prototype View::view('componentName','View files',$args array (optional)); echo View :: view ( 'helloworld' , 'Home/index' ); //again the word helloworld is our component name } } Then write index.php in the Views/Home folder <!doctype html> < html lang = \"<?= lang(); ?>\" > < head > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"shortcut icon\" type = \"image/png\" href = \"<?= site_base_url(); ?>/image/logo.png\" /> < link rel = \"stylesheet\" href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\" > < script src = \"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\" ></ script > < script src = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\" ></ script > < link rel = \"stylesheet\" type = \"text/css\" href = \"<?= site_base_url(); ?>/css/style.css\" > < title > <?= printl('title:home'); ?> </ title > </ head > < body > < div class = 'container-fluid' > < h1 > <?= printc('title:home:hello'); ?> </ h1 > </ div > </ body > </ html > printc() is a built-in function in Zest framework for printing language strings in components. site_base_url() returns the current URL of the site. Now lastly, create our language file en.php in the local folder. <?php return [ 'title:home:hello' => 'Hello World' , ]; Congratulations! You have successfully created a component.","title":"The structure of components"},{"location":"v2.0.3/configuration/","text":"Configuration \u00b6 General \u00b6 App_Name => Name of Application. App_Version => Version of app. SHOW_ERRORS => Error. If on, shows error on display. If off, errors are on the log file. Recommended to be off. Language => Site language. Data_Dir => Default Data directory. Session_Path => Default path for session storage. THEME_PATH => Default theme/view path. AUTO_CSRF_VERIFIED => If on auto verified csrf token. CSRF_TIMESTAMP => csrf token should expire. CRYPTO_KEY => Crypto key used for cryptography. Maintenance => If enabled, site will show maintenance mode. ROUTER_CACHE => Set to true to enable caching, or false to disable caching. Default value is true. ROUTE_CACHE_REGENERATE Timestamp for cache file. After it expires, the cache file auto-refreshes. Default value is 3600 (1 hour). Database \u00b6 DB_DRIVER => Database driver. For now, only supports MySQL. DB_NAME => Name of database that you want to use. MYSQL Configuration \u00b6 MYSQL_HOST => Database host/IP. MYSQL_USER => Database username. MYSQL_PASS => Database password. Email \u00b6 SITE_EMAIL => Site email address. SMTP_HOST => SMTP host/IP. SMTP_USER => Username of SMTP. SMTP_PASS => Password of SMTP. SMTP_PORT => Port of SMTP Auth \u00b6 AUTH_DB_NAME => Name of the database that you want to use in auth. AUTH_DB_TABLE => Name of the database table that you want to use in auth. VERIFICATION_LINK => Default link for verification account/email. RESET_PASSWORD_LINK => Default link for the reset password link. IS_SMTP => If set to true send mail in auth over SMTP. IS_VERIFY_EMAIL => If set to true verification of account/email is required. STICKY_PASSWORD => Is password should be strong. AUTH_ERRORS => Default error msgs. SUCCESS => Default success msgs. AUTH_SUBJECTS => Default email subject. AUTH_MAIL_BODIES => Default email body.","title":"Configuration"},{"location":"v2.0.3/configuration/#configuration","text":"","title":"Configuration"},{"location":"v2.0.3/configuration/#general","text":"App_Name => Name of Application. App_Version => Version of app. SHOW_ERRORS => Error. If on, shows error on display. If off, errors are on the log file. Recommended to be off. Language => Site language. Data_Dir => Default Data directory. Session_Path => Default path for session storage. THEME_PATH => Default theme/view path. AUTO_CSRF_VERIFIED => If on auto verified csrf token. CSRF_TIMESTAMP => csrf token should expire. CRYPTO_KEY => Crypto key used for cryptography. Maintenance => If enabled, site will show maintenance mode. ROUTER_CACHE => Set to true to enable caching, or false to disable caching. Default value is true. ROUTE_CACHE_REGENERATE Timestamp for cache file. After it expires, the cache file auto-refreshes. Default value is 3600 (1 hour).","title":"General"},{"location":"v2.0.3/configuration/#database","text":"DB_DRIVER => Database driver. For now, only supports MySQL. DB_NAME => Name of database that you want to use.","title":"Database"},{"location":"v2.0.3/configuration/#mysql-configuration","text":"MYSQL_HOST => Database host/IP. MYSQL_USER => Database username. MYSQL_PASS => Database password.","title":"MYSQL Configuration"},{"location":"v2.0.3/configuration/#email","text":"SITE_EMAIL => Site email address. SMTP_HOST => SMTP host/IP. SMTP_USER => Username of SMTP. SMTP_PASS => Password of SMTP. SMTP_PORT => Port of SMTP","title":"Email"},{"location":"v2.0.3/configuration/#auth","text":"AUTH_DB_NAME => Name of the database that you want to use in auth. AUTH_DB_TABLE => Name of the database table that you want to use in auth. VERIFICATION_LINK => Default link for verification account/email. RESET_PASSWORD_LINK => Default link for the reset password link. IS_SMTP => If set to true send mail in auth over SMTP. IS_VERIFY_EMAIL => If set to true verification of account/email is required. STICKY_PASSWORD => Is password should be strong. AUTH_ERRORS => Default error msgs. SUCCESS => Default success msgs. AUTH_SUBJECTS => Default email subject. AUTH_MAIL_BODIES => Default email body.","title":"Auth"},{"location":"v2.0.3/console/","text":"The CLI Enviromnent (Console) library bundled with Zest Framework Console \u00b6 Zest Framework provides a simple and straightforward console environment. Start console \u00b6 run the command php Zest This command starts the Zest CLI It will look like the below image","title":"Zest Console"},{"location":"v2.0.3/console/#console","text":"Zest Framework provides a simple and straightforward console environment.","title":"Console"},{"location":"v2.0.3/console/#start-console","text":"run the command php Zest This command starts the Zest CLI It will look like the below image","title":"Start console"},{"location":"v2.0.3/controller/","text":"The controller is generally responsible for performing a request action. Creating a Controller \u00b6 You can easily create controllers in \"\"Zest\"\" Framework goto App/Controllers/ form project root you have to create more controller here. Writing simple controller \u00b6 <?php namespace App\\Controllers ; use Zest\\View\\View ; //you will learn more about view in later this is for accessing view class Home extends \\Zest\\Controller\\Controller { public function index () { echo View :: view ( \"Home/index\" ); //you will learn more about view in later this is for accessing view } } This is easy way for creating controllers this create home page Complex way for writing controller \u00b6 <?php namespace App\\Controllers ; use Zest\\View\\View ; //you will learn more about view in later this is for accessing view class About extends \\Zest\\Controller\\Controller { public function index () { echo $this -> route_params [ 'username' ]; //$this->router_params use for accessing paramter begin passed for more information see https://github.com/Softhub99/Zest/wiki/Routing#router-with-complex-parameter } public function about () { echo view :: SetTemplate ( \"Home/index.html\" ,[ 'header' => 'PHP Template engine' ,]); //you will learn more about view/template engine in later this is for accessing view } }","title":"Controllers"},{"location":"v2.0.3/controller/#creating-a-controller","text":"You can easily create controllers in \"\"Zest\"\" Framework goto App/Controllers/ form project root you have to create more controller here.","title":"Creating a Controller"},{"location":"v2.0.3/controller/#writing-simple-controller","text":"<?php namespace App\\Controllers ; use Zest\\View\\View ; //you will learn more about view in later this is for accessing view class Home extends \\Zest\\Controller\\Controller { public function index () { echo View :: view ( \"Home/index\" ); //you will learn more about view in later this is for accessing view } } This is easy way for creating controllers this create home page","title":"Writing simple controller"},{"location":"v2.0.3/controller/#complex-way-for-writing-controller","text":"<?php namespace App\\Controllers ; use Zest\\View\\View ; //you will learn more about view in later this is for accessing view class About extends \\Zest\\Controller\\Controller { public function index () { echo $this -> route_params [ 'username' ]; //$this->router_params use for accessing paramter begin passed for more information see https://github.com/Softhub99/Zest/wiki/Routing#router-with-complex-parameter } public function about () { echo view :: SetTemplate ( \"Home/index.html\" ,[ 'header' => 'PHP Template engine' ,]); //you will learn more about view/template engine in later this is for accessing view } }","title":"Complex way for writing controller"},{"location":"v2.0.3/cookie/","text":"Cookie Management library bundled with Zest Framework Cookie Management \u00b6 Configuration \u00b6 There is no configuration need for using session library in Zest framework Set \u00b6 For setting the cookie and its value you need to used set_cookie() function take a look at an example: <?php namespace App\\Models ; class users { public function login () { //its prototype is set_cookie($name, $value, $expire, $path, $domain, $secure, $httponly); set_cookie ( \"test\" , \"bla\" , 3600 , \"/\" , $_SERVER [ 'SERVER_NAME' ], true , false ); //return boolean, true | false } } Get \u00b6 To get the cookie value you need to used get_cookie() function take a look at an example: <?php namespace App\\Models ; class users { public function getLogin () { //its prototype is get_cookie(\"name\"); get_cookie ( 'users' ); //return value on success boolean false on fail } } Delete \u00b6 For deleting the cookie value you need to used delete_cookie() function take a look at example: <?php namespace App\\Models ; class users { public function logout () { //its prototype is delete_cookie(\"name\"); delete_cookie ( 'users' ); //return boolean, true | false } } Check \u00b6 For checking is cookie is set or exists you need to used is_cookie() fuunction take a look at an example: <?php namespace App\\Models ; class users { public function isLogin () { //its prototype is is_cookie(\"name\"); is_cookie ( 'users' ); //return boolean, true | false } }","title":"Cookie management"},{"location":"v2.0.3/cookie/#cookie-management","text":"","title":"Cookie Management"},{"location":"v2.0.3/cookie/#configuration","text":"There is no configuration need for using session library in Zest framework","title":"Configuration"},{"location":"v2.0.3/cookie/#set","text":"For setting the cookie and its value you need to used set_cookie() function take a look at an example: <?php namespace App\\Models ; class users { public function login () { //its prototype is set_cookie($name, $value, $expire, $path, $domain, $secure, $httponly); set_cookie ( \"test\" , \"bla\" , 3600 , \"/\" , $_SERVER [ 'SERVER_NAME' ], true , false ); //return boolean, true | false } }","title":"Set"},{"location":"v2.0.3/cookie/#get","text":"To get the cookie value you need to used get_cookie() function take a look at an example: <?php namespace App\\Models ; class users { public function getLogin () { //its prototype is get_cookie(\"name\"); get_cookie ( 'users' ); //return value on success boolean false on fail } }","title":"Get"},{"location":"v2.0.3/cookie/#delete","text":"For deleting the cookie value you need to used delete_cookie() function take a look at example: <?php namespace App\\Models ; class users { public function logout () { //its prototype is delete_cookie(\"name\"); delete_cookie ( 'users' ); //return boolean, true | false } }","title":"Delete"},{"location":"v2.0.3/cookie/#check","text":"For checking is cookie is set or exists you need to used is_cookie() fuunction take a look at an example: <?php namespace App\\Models ; class users { public function isLogin () { //its prototype is is_cookie(\"name\"); is_cookie ( 'users' ); //return boolean, true | false } }","title":"Check"},{"location":"v2.0.3/cryptography/","text":"Cryptography encryption/decryption library bundled with Zest Framework Cryptography \u00b6 Encryption \u00b6 To encrypt the string/data you need to use a encrypt() function just simple and straightforward take a look at an example: <?php //its prototype is ; //encrypt(string,bit); //32 or 64 default 32 encrypt ( \"Hello World\" ); Decryption \u00b6 To decrypt the string/data you need to use a decrypt() function just simple and straightforward take a look at an example: <?php //its prototype is ; //decrypt(hash,bit); //32 or 64 default 32 decrypt ( \"somehashgenereteby encrypt()\" );","title":"Cryptography"},{"location":"v2.0.3/cryptography/#cryptography","text":"","title":"Cryptography"},{"location":"v2.0.3/cryptography/#encryption","text":"To encrypt the string/data you need to use a encrypt() function just simple and straightforward take a look at an example: <?php //its prototype is ; //encrypt(string,bit); //32 or 64 default 32 encrypt ( \"Hello World\" );","title":"Encryption"},{"location":"v2.0.3/cryptography/#decryption","text":"To decrypt the string/data you need to use a decrypt() function just simple and straightforward take a look at an example: <?php //its prototype is ; //decrypt(hash,bit); //32 or 64 default 32 decrypt ( \"somehashgenereteby encrypt()\" );","title":"Decryption"},{"location":"v2.0.3/database/","text":"Database management library bundled with Zest Framework Database management \u00b6 Configuration \u00b6 In order to use a database in Zest framework you need config it properly http://zest.readthedocs.io/en/latest/configuration/#database Simple example \u00b6 Here is simple example: <?php namespace App\\Models ; use Zest\\Database\\Db as DB ; use Config\\Database ; class Post extends DB { /* * Store database name */ protected static $db_name = Database :: DB_NAME ; /* * Store database table name */ protected static $db_tbl = 'posts' ; public function name () { $db = new DB (); $db -> db () -> method (); //example code } } Insert \u00b6 For insert data into the database, you need to used insert(); method with parameters, The insert method return id on success boolean false on fail take a look at an example: // rest code ... /* * Store database name */ protected static $db_name = Database::DB_NAME; /* * Store database table name */ protected static $db_tbl = 'posts'; public function create($field1,$field2,$field3) { $db = new DB(); //Prototype: $db->insert(table,dbName,params); $id = $db->db()->insert(static::$db_tbl,static::$db_name,['field1'=>$field1,'field2'=>$field2,'field3'=>$field3]); //close the database connection, its recommanded $db->db()->close(); return $id; } // rest code ... Select \u00b6 For selecting record you need to use select() method, take a look at following example: // rest code ... /* * Store database name */ protected static $db_name = Database::DB_NAME; /* * Store database table name */ protected static $db_tbl = 'posts'; public function select() { $db = new DB(); //Prototype: $db->db()->insert(['db_name'=>'value','table'=>'value']); $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl]); //close the database connection, its recommanded $db->db()->close(); return $result; } // rest code ... Select by where clause \u00b6 For select records at the specific condition or using where clause the method is same you just need to passed wheres parameter take a look at an example: // rest code ... /* * Store database name */ protected static $db_name = Database::DB_NAME; /* * Store database table name */ protected static $db_tbl = 'posts'; public function select($id) { $db = new DB(); //Prototype: $db->db()->insert(['db_name'=>'value','table'=>'value']); $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'wheres'=>['id = '.$id]]); //close the database connection, its recommanded $db->db()->close(); return $result; } // rest code ... For multiple conditions \u00b6 For using multiple wheres clauses take a look at an example: // rest code ... $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'wheres'=>['id = '.$id,'userId ='.$userId]]); // rest code ... OrderBy \u00b6 For sorting orders, you need to passed orderby parameter take a look at an example: // rest code ... $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'order_by'=> 'id DESC']); //You can also passed id ASC , or you can also passed other then id column // rest code ... Limits \u00b6 For selecting limited records you need to passed limit parameter take a look at an example: // rest code ... $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'limit' => ['start' => 3 , 'end' => 0]]); //start is the limit like 10 //end is where to start 0 means start from beganning // rest code ... Debug \u00b6 For debuging or seeing the query you need to passe debug parameter take a look at example: // rest code ... $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'debug'=>'on']); //then it will var dump your query //like: 'SELECT * FROM users WHERE id = 4'; // rest code ... Delete \u00b6 For deleting arecord in mysql we need to used delete() method with id parameter, Note: If it is not provided all record form specific table will be erased/deleted and this action never be undone. Here is the following example: // rest code ... /* * Store database name */ protected static $db_name = Database::DB_NAME; /* * Store database table name */ protected static $db_tbl = 'posts'; public function delete($id) { $db = new DB(); //Prototype: $db->db()->insert(['db_name'=>'value','table'=>'value','wheres'=>[]]); $result = $result = $db->db()->delete(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'wheres'=>['id = '.$id]]); $db->db()->close(); return $result; } // rest code ... Update \u00b6 For updating records in a database we need to used update method take a look at an example: // rest code ... /* * Store database name */ protected static $db_name = Database::DB_NAME; /* * Store database table name */ protected static $db_tbl = 'posts'; public function update($id,$uId) { $db = new DB(); //Prototype: $db->db()->insert(['db_name'=>'value','table'=>'value','columns'=>[],'wheres'=>[]]); $result = $result = $db->db()->update(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'columns'=>['useId'=>$uId,'update'=>time()],'wheres'=>['id = '.$id]]); $db->db()->close(); return $result; } // rest code ... Count \u00b6 For count record in database we need to used count() method take a look at example // rest code ... $result = $result = $db->db()->count(['db_name'=>static::$db_name,'table'=>static::$db_tbl]); // rest code ... Create the database \u00b6 For creating the database we need to used createDb() method take a look at an example // rest code ... $result = $result = $db->db()->createDb('phone'); // rest code ... Delete the database \u00b6 For deleting the database we need to use deleteDb() method take a look at an example // rest code ... $result = $result = $db->db()->deleteDb('phone'); // rest code ... Create the table \u00b6 For creating the table we need to use createTbl take a look at an example: // rest code ... $result = $result = $db->db()->deleteTbl('db|_name','sql'); // rest code ... Delete the table \u00b6 For deleting the database we need to use the deleteTbl() method. Take a look at an example: // rest code ... $result = $result = $db->db()->deleteTbl('db|_name','users'); // rest code ...","title":"Database Manipulation"},{"location":"v2.0.3/database/#database-management","text":"","title":"Database management"},{"location":"v2.0.3/database/#configuration","text":"In order to use a database in Zest framework you need config it properly http://zest.readthedocs.io/en/latest/configuration/#database","title":"Configuration"},{"location":"v2.0.3/database/#simple-example","text":"Here is simple example: <?php namespace App\\Models ; use Zest\\Database\\Db as DB ; use Config\\Database ; class Post extends DB { /* * Store database name */ protected static $db_name = Database :: DB_NAME ; /* * Store database table name */ protected static $db_tbl = 'posts' ; public function name () { $db = new DB (); $db -> db () -> method (); //example code } }","title":"Simple example"},{"location":"v2.0.3/database/#insert","text":"For insert data into the database, you need to used insert(); method with parameters, The insert method return id on success boolean false on fail take a look at an example: // rest code ... /* * Store database name */ protected static $db_name = Database::DB_NAME; /* * Store database table name */ protected static $db_tbl = 'posts'; public function create($field1,$field2,$field3) { $db = new DB(); //Prototype: $db->insert(table,dbName,params); $id = $db->db()->insert(static::$db_tbl,static::$db_name,['field1'=>$field1,'field2'=>$field2,'field3'=>$field3]); //close the database connection, its recommanded $db->db()->close(); return $id; } // rest code ...","title":"Insert"},{"location":"v2.0.3/database/#select","text":"For selecting record you need to use select() method, take a look at following example: // rest code ... /* * Store database name */ protected static $db_name = Database::DB_NAME; /* * Store database table name */ protected static $db_tbl = 'posts'; public function select() { $db = new DB(); //Prototype: $db->db()->insert(['db_name'=>'value','table'=>'value']); $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl]); //close the database connection, its recommanded $db->db()->close(); return $result; } // rest code ...","title":"Select"},{"location":"v2.0.3/database/#select-by-where-clause","text":"For select records at the specific condition or using where clause the method is same you just need to passed wheres parameter take a look at an example: // rest code ... /* * Store database name */ protected static $db_name = Database::DB_NAME; /* * Store database table name */ protected static $db_tbl = 'posts'; public function select($id) { $db = new DB(); //Prototype: $db->db()->insert(['db_name'=>'value','table'=>'value']); $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'wheres'=>['id = '.$id]]); //close the database connection, its recommanded $db->db()->close(); return $result; } // rest code ...","title":"Select by where clause"},{"location":"v2.0.3/database/#for-multiple-conditions","text":"For using multiple wheres clauses take a look at an example: // rest code ... $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'wheres'=>['id = '.$id,'userId ='.$userId]]); // rest code ...","title":"For multiple conditions"},{"location":"v2.0.3/database/#orderby","text":"For sorting orders, you need to passed orderby parameter take a look at an example: // rest code ... $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'order_by'=> 'id DESC']); //You can also passed id ASC , or you can also passed other then id column // rest code ...","title":"OrderBy"},{"location":"v2.0.3/database/#limits","text":"For selecting limited records you need to passed limit parameter take a look at an example: // rest code ... $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'limit' => ['start' => 3 , 'end' => 0]]); //start is the limit like 10 //end is where to start 0 means start from beganning // rest code ...","title":"Limits"},{"location":"v2.0.3/database/#debug","text":"For debuging or seeing the query you need to passe debug parameter take a look at example: // rest code ... $result = $result = $db->db()->select(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'debug'=>'on']); //then it will var dump your query //like: 'SELECT * FROM users WHERE id = 4'; // rest code ...","title":"Debug"},{"location":"v2.0.3/database/#delete","text":"For deleting arecord in mysql we need to used delete() method with id parameter, Note: If it is not provided all record form specific table will be erased/deleted and this action never be undone. Here is the following example: // rest code ... /* * Store database name */ protected static $db_name = Database::DB_NAME; /* * Store database table name */ protected static $db_tbl = 'posts'; public function delete($id) { $db = new DB(); //Prototype: $db->db()->insert(['db_name'=>'value','table'=>'value','wheres'=>[]]); $result = $result = $db->db()->delete(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'wheres'=>['id = '.$id]]); $db->db()->close(); return $result; } // rest code ...","title":"Delete"},{"location":"v2.0.3/database/#update","text":"For updating records in a database we need to used update method take a look at an example: // rest code ... /* * Store database name */ protected static $db_name = Database::DB_NAME; /* * Store database table name */ protected static $db_tbl = 'posts'; public function update($id,$uId) { $db = new DB(); //Prototype: $db->db()->insert(['db_name'=>'value','table'=>'value','columns'=>[],'wheres'=>[]]); $result = $result = $db->db()->update(['db_name'=>static::$db_name,'table'=>static::$db_tbl,'columns'=>['useId'=>$uId,'update'=>time()],'wheres'=>['id = '.$id]]); $db->db()->close(); return $result; } // rest code ...","title":"Update"},{"location":"v2.0.3/database/#count","text":"For count record in database we need to used count() method take a look at example // rest code ... $result = $result = $db->db()->count(['db_name'=>static::$db_name,'table'=>static::$db_tbl]); // rest code ...","title":"Count"},{"location":"v2.0.3/database/#create-the-database","text":"For creating the database we need to used createDb() method take a look at an example // rest code ... $result = $result = $db->db()->createDb('phone'); // rest code ...","title":"Create the database"},{"location":"v2.0.3/database/#delete-the-database","text":"For deleting the database we need to use deleteDb() method take a look at an example // rest code ... $result = $result = $db->db()->deleteDb('phone'); // rest code ...","title":"Delete the database"},{"location":"v2.0.3/database/#create-the-table","text":"For creating the table we need to use createTbl take a look at an example: // rest code ... $result = $result = $db->db()->deleteTbl('db|_name','sql'); // rest code ...","title":"Create the table"},{"location":"v2.0.3/database/#delete-the-table","text":"For deleting the database we need to use the deleteTbl() method. Take a look at an example: // rest code ... $result = $result = $db->db()->deleteTbl('db|_name','users'); // rest code ...","title":"Delete the table"},{"location":"v2.0.3/di/","text":"Dependency Injection \u00b6 Zest framework provides IoC to load dependent classes automatically. Where to define \u00b6 Go to Config/Dependencies.php You should see something like the following: <?php /* * class that should be automatically loaded */ return [ 'version' => new \\Zest\\Common\\Version (), //define more if you want ]; Get the class in your method/view or controller \u00b6 $d = new \\Zest\\Common\\Container\\DIS(); echo $d->get('version')::VERSION;","title":"Dependencies Injection"},{"location":"v2.0.3/di/#dependency-injection","text":"Zest framework provides IoC to load dependent classes automatically.","title":"Dependency Injection"},{"location":"v2.0.3/di/#where-to-define","text":"Go to Config/Dependencies.php You should see something like the following: <?php /* * class that should be automatically loaded */ return [ 'version' => new \\Zest\\Common\\Version (), //define more if you want ];","title":"Where to define"},{"location":"v2.0.3/di/#get-the-class-in-your-methodview-or-controller","text":"$d = new \\Zest\\Common\\Container\\DIS(); echo $d->get('version')::VERSION;","title":"Get the class in your method/view or controller"},{"location":"v2.0.3/input/","text":"Input Handling library bundled with Zest Framework Input Handling \u00b6 Input handling is the way getting input form users (which is also called form submittion) input function \u00b6 input function is use to get any http type value its accpet one paramter which is name of field $username = input('username'); Escape function \u00b6 The escape function is use to clean user input form any type of malicious code its accpet one paramter which is value that you want clean $username = input('username'); $username = escape($username); //OR $name = escape(imput('name'));","title":"Input Handling"},{"location":"v2.0.3/input/#input-handling","text":"Input handling is the way getting input form users (which is also called form submittion)","title":"Input Handling"},{"location":"v2.0.3/input/#input-function","text":"input function is use to get any http type value its accpet one paramter which is name of field $username = input('username');","title":"input function"},{"location":"v2.0.3/input/#escape-function","text":"The escape function is use to clean user input form any type of malicious code its accpet one paramter which is value that you want clean $username = input('username'); $username = escape($username); //OR $name = escape(imput('name'));","title":"Escape function"},{"location":"v2.0.3/installation/","text":"Installation Requirements: \u00b6 PHP 7.1 Composer Installing Zest is very simple. First, ensure you have the right PHP version and Composer installed, then in your command prompt run: $ composer create-project softhub99/zest blog The above command will create a new Zest project inside a new folder name blog, then: $ cd blog and then run $ composer update Local Development With VirtualHost \u00b6 Running Your Project With VirtualHost 1 2 3 4 5 6 7 <VirtualHost *:80> DocumentRoot \"/var/www/html/blog/public\" ServerName example.com </VirtualHost> Restart Apache $ service httpd restsart Navigate to http://example.com , you should be able to view the app. Running Your Project Without VirtualHost if you choose to run your project without VirtualHost , So you have to access it with http://localhost/blog/public","title":"Installation"},{"location":"v2.0.3/installation/#installation-requirements","text":"PHP 7.1 Composer Installing Zest is very simple. First, ensure you have the right PHP version and Composer installed, then in your command prompt run: $ composer create-project softhub99/zest blog The above command will create a new Zest project inside a new folder name blog, then: $ cd blog and then run $ composer update","title":"Installation Requirements:"},{"location":"v2.0.3/installation/#local-development-with-virtualhost","text":"Running Your Project With VirtualHost 1 2 3 4 5 6 7 <VirtualHost *:80> DocumentRoot \"/var/www/html/blog/public\" ServerName example.com </VirtualHost> Restart Apache $ service httpd restsart Navigate to http://example.com , you should be able to view the app. Running Your Project Without VirtualHost if you choose to run your project without VirtualHost , So you have to access it with http://localhost/blog/public","title":"Local Development With VirtualHost"},{"location":"v2.0.3/logger/","text":"Logger library bundled with Zest Framework Logger \u00b6 Logging is one of the most ubiquitous tasks encountered in PHP. We use logs to track error messages, record important events, and debug problems with the code. Use logger \u00b6 $logger = new \\Zest\\Common\\Logger\\Logger; $logger->notice('This file {file} is not found',['file' => 'user.jpg']); //Display the log msg // var_dump($logger->get); echo $logger->get()['message']; //echo View::view('Home/index'); the get() method return array , level and message Log file \u00b6 Log file is locate in Storage/Data/.logs Levels \u00b6 emergency => $logger->emergency(msg,[context]) alert => $logger->alert(msg,[context]) critical => $logger->emergency(msg,[critical]) error => $logger->error(msg,[context]) warning => $logger->warning(msg,[context]) notice => $logger->notice(msg,[context]) info => $logger->info(msg,[context]) debug => $logger->debug(msg,[context])","title":"Logger"},{"location":"v2.0.3/logger/#logger","text":"Logging is one of the most ubiquitous tasks encountered in PHP. We use logs to track error messages, record important events, and debug problems with the code.","title":"Logger"},{"location":"v2.0.3/logger/#use-logger","text":"$logger = new \\Zest\\Common\\Logger\\Logger; $logger->notice('This file {file} is not found',['file' => 'user.jpg']); //Display the log msg // var_dump($logger->get); echo $logger->get()['message']; //echo View::view('Home/index'); the get() method return array , level and message","title":"Use logger"},{"location":"v2.0.3/logger/#log-file","text":"Log file is locate in Storage/Data/.logs","title":"Log file"},{"location":"v2.0.3/logger/#levels","text":"emergency => $logger->emergency(msg,[context]) alert => $logger->alert(msg,[context]) critical => $logger->emergency(msg,[critical]) error => $logger->error(msg,[context]) warning => $logger->warning(msg,[context]) notice => $logger->notice(msg,[context]) info => $logger->info(msg,[context]) debug => $logger->debug(msg,[context])","title":"Levels"},{"location":"v2.0.3/mail/","text":"The Zest framework provides support for sending email using SMTP and phpMailer. SMTP Setup \u00b6 To send email using SMTP, first update your Email.php file as follows: /** * Site Email. * * @var string */ const SITE_EMAIL = 'your-site-email'; /** * SMPT Host. * * @var string */ const SMTP_HOST = 'your-smtp-host'; /** * SMPT User. * * @var string */ const SMTP_USER = 'your-smtp-user'; /** * SMPT Pass. * * @var string */ const SMTP_PASS = 'your-smtp-pass'; /** * SMPT Port. * * @var int */ const SMTP_PORT = 111; Sending Mail \u00b6 To send an email, simply do the following: <?php namespace App\\Controllers ; use Zest\\View\\View ; use Zest\\Mail\\Mail ; class Home extends \\Zest\\Controller\\Controller { public function index () { $mail = new Mail ; //Set subject. $mail -> setSubject ( 'Example mail' ); //Sender, like support@example.com $mail -> setSender ( 'mail@example.com' ); //Set the plain content of the mail. $mail -> setContentPlain ( 'Example plain-content!' ); //Add a receiver of the mail (you can add more than one receiver too). $mail -> addReceiver ( 'example@gmail.com' ); //Finally send the mail. if ( $mail -> send ()) { echo \"email send\" ; } else { echo \"email not send\" ; } } } Sending SMTP email \u00b6 For sending email over SMTP, you just need to add $mail->isSMTP(true); before $mail->send(); . It becomes the following: //rest code ....... $mail->isSMTP(true); //Finally send the mail. if ($mail->send()) { echo \"email send\"; } else { echo \"email not send\"; } Sending Mail with Template/HTML \u00b6 For sending HTML/template mail, you just need change the method name. Instead of calling setContentPlain() , you just need call setContentHTML() //rest code ....... $mail->setSender('mail@example.com'); //Set the plain content of the mail. $mail->setContentPlain('Example plain-content!'); //rest code ....... Sending email with an attachment. \u00b6 To add an attachment to your mail simple add this line $mail->addAttachment($file); //rest code ....... $mail->addAttachment(\"path/to/file\"); //rest code ....... If you want to send mutiple files, just repeat this line with whatever you want to attach. Setting a \"reply to\" address. \u00b6 For setting a \"reply to\" address, you just need to call the setReplyTo() method. $mail->setReplyTo('example@example.com'); Adding CC \u00b6 To add CC addresses, you just need to call the addCc(); method. $mail->addCc('CC@example.com'); Adding BCC \u00b6 To add BCC addresses, you just need to call the addBcc(); method. $mail->addBcc('bcc@example.com');","title":"Sending Mail"},{"location":"v2.0.3/mail/#smtp-setup","text":"To send email using SMTP, first update your Email.php file as follows: /** * Site Email. * * @var string */ const SITE_EMAIL = 'your-site-email'; /** * SMPT Host. * * @var string */ const SMTP_HOST = 'your-smtp-host'; /** * SMPT User. * * @var string */ const SMTP_USER = 'your-smtp-user'; /** * SMPT Pass. * * @var string */ const SMTP_PASS = 'your-smtp-pass'; /** * SMPT Port. * * @var int */ const SMTP_PORT = 111;","title":"SMTP Setup"},{"location":"v2.0.3/mail/#sending-mail","text":"To send an email, simply do the following: <?php namespace App\\Controllers ; use Zest\\View\\View ; use Zest\\Mail\\Mail ; class Home extends \\Zest\\Controller\\Controller { public function index () { $mail = new Mail ; //Set subject. $mail -> setSubject ( 'Example mail' ); //Sender, like support@example.com $mail -> setSender ( 'mail@example.com' ); //Set the plain content of the mail. $mail -> setContentPlain ( 'Example plain-content!' ); //Add a receiver of the mail (you can add more than one receiver too). $mail -> addReceiver ( 'example@gmail.com' ); //Finally send the mail. if ( $mail -> send ()) { echo \"email send\" ; } else { echo \"email not send\" ; } } }","title":"Sending Mail"},{"location":"v2.0.3/mail/#sending-smtp-email","text":"For sending email over SMTP, you just need to add $mail->isSMTP(true); before $mail->send(); . It becomes the following: //rest code ....... $mail->isSMTP(true); //Finally send the mail. if ($mail->send()) { echo \"email send\"; } else { echo \"email not send\"; }","title":"Sending SMTP email"},{"location":"v2.0.3/mail/#sending-mail-with-templatehtml","text":"For sending HTML/template mail, you just need change the method name. Instead of calling setContentPlain() , you just need call setContentHTML() //rest code ....... $mail->setSender('mail@example.com'); //Set the plain content of the mail. $mail->setContentPlain('Example plain-content!'); //rest code .......","title":"Sending Mail with Template/HTML"},{"location":"v2.0.3/mail/#sending-email-with-an-attachment","text":"To add an attachment to your mail simple add this line $mail->addAttachment($file); //rest code ....... $mail->addAttachment(\"path/to/file\"); //rest code ....... If you want to send mutiple files, just repeat this line with whatever you want to attach.","title":"Sending email with an attachment."},{"location":"v2.0.3/mail/#setting-a-reply-to-address","text":"For setting a \"reply to\" address, you just need to call the setReplyTo() method. $mail->setReplyTo('example@example.com');","title":"Setting a \"reply to\" address."},{"location":"v2.0.3/mail/#adding-cc","text":"To add CC addresses, you just need to call the addCc(); method. $mail->addCc('CC@example.com');","title":"Adding CC"},{"location":"v2.0.3/mail/#adding-bcc","text":"To add BCC addresses, you just need to call the addBcc(); method. $mail->addBcc('bcc@example.com');","title":"Adding BCC"},{"location":"v2.0.3/maintenance/","text":"Site Maintenance library bundled with Zest Framework Site Maintenance \u00b6 Enable \u00b6 There are two ways to enable maintenance mode (i.e., to show the user a message that the site is in maintenance mode). Config file \u00b6 In the configration file you need set Maintenance to true . /** * Default site maintainness. * * @var bool */ const Maintenance = true; Dynamically \u00b6 To enable maintenance mode dynamically you need to create site admins and create a method called adminEnableMaintenance in your Admin controller, and add the following in this method: maintenanceInstance()->updataMaintenance(true); Disable \u00b6 There are two ways to disable maintenance mode. Config file \u00b6 In the configration file you need set Maintenance to false . /** * Default maintenance mode value. * * @var bool */ const Maintenance = false; Dynamically \u00b6 To disable maintenance mode dynamically you need to create site admins and create a method called adminEnableMaintenance in your Admin controller, and add the following in this method: maintenanceInstance()->updataMaintenance(false); Change the message \u00b6 For changing the default message or style a little bit, open 503.php from your views folder. path: ../App/Views/errors/503.php Note: \u00b6 Once maintenance mode is enabled via the configuration file, it will never be disabled by a dynamic process, but if the maintance disabled via the configuration file, it can be enabled and disabled by a dynamic process.","title":"Site Maintenance"},{"location":"v2.0.3/maintenance/#site-maintenance","text":"","title":"Site Maintenance"},{"location":"v2.0.3/maintenance/#enable","text":"There are two ways to enable maintenance mode (i.e., to show the user a message that the site is in maintenance mode).","title":"Enable"},{"location":"v2.0.3/maintenance/#config-file","text":"In the configration file you need set Maintenance to true . /** * Default site maintainness. * * @var bool */ const Maintenance = true;","title":"Config file"},{"location":"v2.0.3/maintenance/#dynamically","text":"To enable maintenance mode dynamically you need to create site admins and create a method called adminEnableMaintenance in your Admin controller, and add the following in this method: maintenanceInstance()->updataMaintenance(true);","title":"Dynamically"},{"location":"v2.0.3/maintenance/#disable","text":"There are two ways to disable maintenance mode.","title":"Disable"},{"location":"v2.0.3/maintenance/#config-file_1","text":"In the configration file you need set Maintenance to false . /** * Default maintenance mode value. * * @var bool */ const Maintenance = false;","title":"Config file"},{"location":"v2.0.3/maintenance/#dynamically_1","text":"To disable maintenance mode dynamically you need to create site admins and create a method called adminEnableMaintenance in your Admin controller, and add the following in this method: maintenanceInstance()->updataMaintenance(false);","title":"Dynamically"},{"location":"v2.0.3/maintenance/#change-the-message","text":"For changing the default message or style a little bit, open 503.php from your views folder. path: ../App/Views/errors/503.php","title":"Change the message"},{"location":"v2.0.3/maintenance/#note","text":"Once maintenance mode is enabled via the configuration file, it will never be disabled by a dynamic process, but if the maintance disabled via the configuration file, it can be enabled and disabled by a dynamic process.","title":"Note:"},{"location":"v2.0.3/model/","text":"Model \u00b6 Model are actually behavior of app. Creating the model \u00b6 You will find model directory in App/Models/ , All the models store here Suppose you want create database modal thats handel database stuff it will look like that <?php <? php namespace App\\Models ; use Config\\Config ; use Zest\\Database\\Db as DB ; class Post extends DB { /* * Store database name */ protected static $db_name = Config :: DB_NAME ; /* * Store database table name */ protected static $db_tbl = 'posts' ; public function name () { $db = new DB (); $db -> db () -> method (); //example code //$db->db()->close() //close the connection } } Accessing models in Controllers \u00b6 You can accesss models in following way \\App\\Models\\modalname::method(param); So in our above example its look like \\App\\Models\\Post::yourmethod","title":"Models"},{"location":"v2.0.3/model/#model","text":"Model are actually behavior of app.","title":"Model"},{"location":"v2.0.3/model/#creating-the-model","text":"You will find model directory in App/Models/ , All the models store here Suppose you want create database modal thats handel database stuff it will look like that <?php <? php namespace App\\Models ; use Config\\Config ; use Zest\\Database\\Db as DB ; class Post extends DB { /* * Store database name */ protected static $db_name = Config :: DB_NAME ; /* * Store database table name */ protected static $db_tbl = 'posts' ; public function name () { $db = new DB (); $db -> db () -> method (); //example code //$db->db()->close() //close the connection } }","title":"Creating the model"},{"location":"v2.0.3/model/#accessing-models-in-controllers","text":"You can accesss models in following way \\App\\Models\\modalname::method(param); So in our above example its look like \\App\\Models\\Post::yourmethod","title":"Accessing models in Controllers"},{"location":"v2.0.3/output/","text":"Output Handling library bundled with Zest Framework Output Handling \u00b6 Output handling is the way to display the value(which is also called output stream) printl function \u00b6 printl function is use to get language string value form language string file (this function isn't work in components) echo printl('home:welcome'); printc function \u00b6 printc function is use to get language string value form language string file only in components echo printc('home:welcome'); Note \u00b6 the language file is locate in Local folder Zest \u00b6 App/Local Components \u00b6 App/Components/{name}/Local {name} refer to component name","title":"Output Handling"},{"location":"v2.0.3/output/#output-handling","text":"Output handling is the way to display the value(which is also called output stream)","title":"Output Handling"},{"location":"v2.0.3/output/#printl-function","text":"printl function is use to get language string value form language string file (this function isn't work in components) echo printl('home:welcome');","title":"printl function"},{"location":"v2.0.3/output/#printc-function","text":"printc function is use to get language string value form language string file only in components echo printc('home:welcome');","title":"printc function"},{"location":"v2.0.3/output/#note","text":"the language file is locate in Local folder","title":"Note"},{"location":"v2.0.3/output/#zest","text":"App/Local","title":"Zest"},{"location":"v2.0.3/output/#components","text":"App/Components/{name}/Local {name} refer to component name","title":"Components"},{"location":"v2.0.3/routing/","text":"Where to Define Your Application Routes \u00b6 goto routes directory of project you will see routes.php all routes define here Simple way to define router \u00b6 Zest framework support different way to define routes $router->add('path', ['controller' => 'name', 'action' => 'name']); OR $router->add('path','controller@method'); the path is the like example.com/about in this case about will be the path controller is the name of controller which one you want to use for this route action is method of controller Dispatch \u00b6 $router->dispatch($_SERVER['QUERY_STRING']); are use to process request Route with Closure or Callback \u00b6 You can also define a route that uses a Closure or callback as the handler like so $router->add('user/{id:[0-9]}', function ($args) { echo 'Example route using closure '.$args['id'] . \" \".$args['name']; }); Router with parameter \u00b6 Router with parameter means you want passing parameter to the url e.g example.com/profile/100 100 is the parameter of the request $router->add('{controller}/{id:\\d+}/{action}', ['controller' => 'profile','action' => 'index']); This will create example.com/profile/100 for you you can access by placeholder that you use in case id Router with complex parameter \u00b6 You can also add router with complex parameter in this case you have to use regx $router->add('{controller}/{username:[a-z+0-9]+}/{action}', ['controller' => 'profile','action' => 'index']); its create url example.com/profile/username you can pass string+numbers here and access through placeholder that you define in this case username Defining GET Routes \u00b6 <?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> get ( '' , 'Home@index' ); //OR // $router->add('',\"Home@index\",'GET'); // $router->get('',['controller'=>'Home','method'=>'index']); // $router->add('',['controller'=>'Home','method'=>'index'],'GET'); Defining POST Routes \u00b6 <?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> post ( 'login' , 'Home@login' ); //OR // $router->add('login',\"Home@login\",'POST'); // $router->post('login',['controller'=>'Home','method'=>'login']); // $router->add('login',['controller'=>'Home','method'=>'login'],'POST'); The Zest Route class supports all major HTTP Verbs (POST, GET, PUT, PATCH, DELETE) for example to create a route with PATCH HTTP verb simple do the following <?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> patch ( 'profile/update' , 'Account@update' ); //OR // $router->add('login',\"Home@update\",'PATCH'); // $router->patch('login',['controller'=>'Home','method'=>'update']); // $router->add('login',['controller'=>'Home','method'=>'update'],'PATCH'); Route Caching \u00b6 Zest Franework provide router caching feature so you should take advantage of Zest's route cache. Zest router cache file Zest router file located at root/Storage/Cache Using the route cache will drastically decrease the amount of time it takes to register all of your application's routes. In some cases, your route registration may even be up to 100x faster. To generate a route cache, just need to enable from config file ROUTER_CACHE => set to true to enable caching, or false to disable caching. Default value is true. Zest framework provide an easy creating website using zest After running this command, your cached routes file will be loaded on every request. Remember, if you add any new routes. You don't need to regenerate a fresh route cache, Because Zest framework regenerate a fresh route cache automatically for you affter specific time define in config file. ROUTE_CACHE_REGENERATE timestamp for cache file, after expire cache file auto refreshed , default value is 3600 - 1Hour. note: Router caching feature is not available in components \u00b6","title":"Routing"},{"location":"v2.0.3/routing/#where-to-define-your-application-routes","text":"goto routes directory of project you will see routes.php all routes define here","title":"Where to Define Your Application Routes"},{"location":"v2.0.3/routing/#simple-way-to-define-router","text":"Zest framework support different way to define routes $router->add('path', ['controller' => 'name', 'action' => 'name']); OR $router->add('path','controller@method'); the path is the like example.com/about in this case about will be the path controller is the name of controller which one you want to use for this route action is method of controller","title":"Simple way to define router"},{"location":"v2.0.3/routing/#dispatch","text":"$router->dispatch($_SERVER['QUERY_STRING']); are use to process request","title":"Dispatch"},{"location":"v2.0.3/routing/#route-with-closure-or-callback","text":"You can also define a route that uses a Closure or callback as the handler like so $router->add('user/{id:[0-9]}', function ($args) { echo 'Example route using closure '.$args['id'] . \" \".$args['name']; });","title":"Route with Closure or Callback"},{"location":"v2.0.3/routing/#router-with-parameter","text":"Router with parameter means you want passing parameter to the url e.g example.com/profile/100 100 is the parameter of the request $router->add('{controller}/{id:\\d+}/{action}', ['controller' => 'profile','action' => 'index']); This will create example.com/profile/100 for you you can access by placeholder that you use in case id","title":"Router with parameter"},{"location":"v2.0.3/routing/#router-with-complex-parameter","text":"You can also add router with complex parameter in this case you have to use regx $router->add('{controller}/{username:[a-z+0-9]+}/{action}', ['controller' => 'profile','action' => 'index']); its create url example.com/profile/username you can pass string+numbers here and access through placeholder that you define in this case username","title":"Router with complex parameter"},{"location":"v2.0.3/routing/#defining-get-routes","text":"<?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> get ( '' , 'Home@index' ); //OR // $router->add('',\"Home@index\",'GET'); // $router->get('',['controller'=>'Home','method'=>'index']); // $router->add('',['controller'=>'Home','method'=>'index'],'GET');","title":"Defining GET Routes"},{"location":"v2.0.3/routing/#defining-post-routes","text":"<?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> post ( 'login' , 'Home@login' ); //OR // $router->add('login',\"Home@login\",'POST'); // $router->post('login',['controller'=>'Home','method'=>'login']); // $router->add('login',['controller'=>'Home','method'=>'login'],'POST'); The Zest Route class supports all major HTTP Verbs (POST, GET, PUT, PATCH, DELETE) for example to create a route with PATCH HTTP verb simple do the following <?php /** * @param target, * @param handler, fully qualified classname and method or Closure */ $router -> patch ( 'profile/update' , 'Account@update' ); //OR // $router->add('login',\"Home@update\",'PATCH'); // $router->patch('login',['controller'=>'Home','method'=>'update']); // $router->add('login',['controller'=>'Home','method'=>'update'],'PATCH');","title":"Defining POST Routes"},{"location":"v2.0.3/routing/#route-caching","text":"Zest Franework provide router caching feature so you should take advantage of Zest's route cache. Zest router cache file Zest router file located at root/Storage/Cache Using the route cache will drastically decrease the amount of time it takes to register all of your application's routes. In some cases, your route registration may even be up to 100x faster. To generate a route cache, just need to enable from config file ROUTER_CACHE => set to true to enable caching, or false to disable caching. Default value is true. Zest framework provide an easy creating website using zest After running this command, your cached routes file will be loaded on every request. Remember, if you add any new routes. You don't need to regenerate a fresh route cache, Because Zest framework regenerate a fresh route cache automatically for you affter specific time define in config file. ROUTE_CACHE_REGENERATE timestamp for cache file, after expire cache file auto refreshed , default value is 3600 - 1Hour.","title":"Route Caching"},{"location":"v2.0.3/routing/#note-router-caching-feature-is-not-available-in-components","text":"","title":"note: Router caching feature is not available in components"},{"location":"v2.0.3/session/","text":"Session handling library bundled with Zest Framework Session Handling \u00b6 Configuration \u00b6 There is no configuration need for using session library in Zest framework but if you want change session storage path in Config.php you have to change according to the details of your server. /** * Default Session storage path. * * @var string */ const Session_Path = '../Storage/Session/'; Set \u00b6 For setting the session and its value you need to used setValue() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function login () { //its prototype is Session::setvalue(\"name\",\"value\"); Session :: setValue ( 'users' , 11223 ); //return boolean, true | false } } Get \u00b6 To get the session value you need to used getValue() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function getLogin () { //its prototype is Session::getValue(\"name\"); Session :: getValue ( 'users' ); //return value on success boolean false on fail } } Delete \u00b6 For deleting the session value you need to used unsetValue() method take a look at example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function logout () { //its prototype is Session::unsetValue(\"name\"); Session :: unsetValue ( 'users' ); //return boolean, true | false } } Check \u00b6 For checking is session is active you need to used isSession() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function isLogin () { //its prototype is Session::isSession(\"name\"); Session :: isSession ( 'users' ); //return boolean, true | false } }","title":"Session Handling"},{"location":"v2.0.3/session/#session-handling","text":"","title":"Session Handling"},{"location":"v2.0.3/session/#configuration","text":"There is no configuration need for using session library in Zest framework but if you want change session storage path in Config.php you have to change according to the details of your server. /** * Default Session storage path. * * @var string */ const Session_Path = '../Storage/Session/';","title":"Configuration"},{"location":"v2.0.3/session/#set","text":"For setting the session and its value you need to used setValue() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function login () { //its prototype is Session::setvalue(\"name\",\"value\"); Session :: setValue ( 'users' , 11223 ); //return boolean, true | false } }","title":"Set"},{"location":"v2.0.3/session/#get","text":"To get the session value you need to used getValue() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function getLogin () { //its prototype is Session::getValue(\"name\"); Session :: getValue ( 'users' ); //return value on success boolean false on fail } }","title":"Get"},{"location":"v2.0.3/session/#delete","text":"For deleting the session value you need to used unsetValue() method take a look at example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function logout () { //its prototype is Session::unsetValue(\"name\"); Session :: unsetValue ( 'users' ); //return boolean, true | false } }","title":"Delete"},{"location":"v2.0.3/session/#check","text":"For checking is session is active you need to used isSession() method take a look at an example: <?php namespace App\\Models ; use Zest\\Session\\Session ; class users { public function isLogin () { //its prototype is Session::isSession(\"name\"); Session :: isSession ( 'users' ); //return boolean, true | false } }","title":"Check"},{"location":"v2.0.3/validation/","text":"Zest provides different methods to easily validate data. Validation simple usage \u00b6 Let's consider a simple example. We shall attempt to accept input from the user. The first thing we need to do is define the necessary routes. Define Route \u00b6 $router->add('user/create',['controller'=>\"User\",'action'=>'userCreate']); Create a Controller with Validation Logic \u00b6 <?php namespace App\\Controllers ; use Zest\\View\\View ; use Zest\\Validation\\Validation ; class User extends \\Zest\\Controller\\Controller { public function usercreate () { if ( input ( 'submit' )) { $rules = [ 'username' => [ 'required' => true , ], 'email' => [ 'required' => true ], 'password' => [ 'required' => true , ], ]; $validation = new Validation ( input_all (), $rules , 'input' ); if ( $validation -> fail ()){ $errors = $validation -> error () -> get (); foreach ( $errors as $error ) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } } else { //TO-Do create the user //We will provide auth clas soon } } else { View :: view ( 'Home/form' ); } } } User form file \u00b6 <!DOCTYPE html> < html > < head > < title > Signup </ title > </ head > < body > < form actio = '' method = 'post' > < label > Name: </ label > < input type = \"text\" name = \"username\" >< br > < label > Email: </ label > < input type = \"text\" name = \"email\" >< br > < label > Password: </ label > < input type = \"text\" name = \"password\" >< br > < input type = \"submit\" name = \"submit\" > </ form > </ body > </ html > Getting validation errors for specific fields \u00b6 /** * Check if a given key exists in error message * * @param $key * @return bool */ $exists = $validator->error()->has('username'); /** * Get all the validation errors for a specific fields * * @param $key * @return array */ $passwordErrors = $validator->error()->get('password'); /** * Get the first validation error for a specific fields * * @param $key * @return mixed */ $firstError = $validator->error()->first('email'); //OR $lastError = $validator->error()->lase('email'); } Available Validation Rules \u00b6 The following validation rule are available starting from Zest v1.9.1 Required rule \u00b6 The required rule is used to specify that a specific field cannot be empty: $rules = [ 'username' => ['required' => true,], ]; Int rule \u00b6 The int rule is used to specify that a specific field much be int: $rules = [ 'favNum' => ['int' => true,], ]; Float rule \u00b6 The float rule is used to specify that a specific field much be float: $rules = [ 'payment' => ['float' => true,], ]; String rule \u00b6 The string rule is used to specify that a specific field much be string: $rules = [ 'name' => ['string' => true,], ]; Email rule \u00b6 The required rule is used to specify that a specific field must be a valid email address: $rules = [ 'email' => ['email' => true,], ]; IP rule \u00b6 The IP rule is used to specify that a specific field must be valid IP address: $rules = [ 'email' => ['email' => true,], ]; JSON rule \u00b6 The JSON rule validates the json value $validation = new Validation('jsonValue','validate','json'); Unique rule \u00b6 The unique rule allows you to check if a given value exists in a specific database table: $validation = new Validation(['field'=> 'fieldLike_username','value'=>'valueToBeSearch'],'tabelName');","title":"Validation"},{"location":"v2.0.3/validation/#validation-simple-usage","text":"Let's consider a simple example. We shall attempt to accept input from the user. The first thing we need to do is define the necessary routes.","title":"Validation simple usage"},{"location":"v2.0.3/validation/#define-route","text":"$router->add('user/create',['controller'=>\"User\",'action'=>'userCreate']);","title":"Define Route"},{"location":"v2.0.3/validation/#create-a-controller-with-validation-logic","text":"<?php namespace App\\Controllers ; use Zest\\View\\View ; use Zest\\Validation\\Validation ; class User extends \\Zest\\Controller\\Controller { public function usercreate () { if ( input ( 'submit' )) { $rules = [ 'username' => [ 'required' => true , ], 'email' => [ 'required' => true ], 'password' => [ 'required' => true , ], ]; $validation = new Validation ( input_all (), $rules , 'input' ); if ( $validation -> fail ()){ $errors = $validation -> error () -> get (); foreach ( $errors as $error ) { foreach ( $error as $value ) { echo $value . \"<br>\" ; } } } else { //TO-Do create the user //We will provide auth clas soon } } else { View :: view ( 'Home/form' ); } } }","title":"Create a Controller with Validation Logic"},{"location":"v2.0.3/validation/#user-form-file","text":"<!DOCTYPE html> < html > < head > < title > Signup </ title > </ head > < body > < form actio = '' method = 'post' > < label > Name: </ label > < input type = \"text\" name = \"username\" >< br > < label > Email: </ label > < input type = \"text\" name = \"email\" >< br > < label > Password: </ label > < input type = \"text\" name = \"password\" >< br > < input type = \"submit\" name = \"submit\" > </ form > </ body > </ html >","title":"User form file"},{"location":"v2.0.3/validation/#getting-validation-errors-for-specific-fields","text":"/** * Check if a given key exists in error message * * @param $key * @return bool */ $exists = $validator->error()->has('username'); /** * Get all the validation errors for a specific fields * * @param $key * @return array */ $passwordErrors = $validator->error()->get('password'); /** * Get the first validation error for a specific fields * * @param $key * @return mixed */ $firstError = $validator->error()->first('email'); //OR $lastError = $validator->error()->lase('email'); }","title":"Getting validation errors for specific fields"},{"location":"v2.0.3/validation/#available-validation-rules","text":"The following validation rule are available starting from Zest v1.9.1","title":"Available Validation Rules"},{"location":"v2.0.3/validation/#required-rule","text":"The required rule is used to specify that a specific field cannot be empty: $rules = [ 'username' => ['required' => true,], ];","title":"Required rule"},{"location":"v2.0.3/validation/#int-rule","text":"The int rule is used to specify that a specific field much be int: $rules = [ 'favNum' => ['int' => true,], ];","title":"Int rule"},{"location":"v2.0.3/validation/#float-rule","text":"The float rule is used to specify that a specific field much be float: $rules = [ 'payment' => ['float' => true,], ];","title":"Float rule"},{"location":"v2.0.3/validation/#string-rule","text":"The string rule is used to specify that a specific field much be string: $rules = [ 'name' => ['string' => true,], ];","title":"String rule"},{"location":"v2.0.3/validation/#email-rule","text":"The required rule is used to specify that a specific field must be a valid email address: $rules = [ 'email' => ['email' => true,], ];","title":"Email rule"},{"location":"v2.0.3/validation/#ip-rule","text":"The IP rule is used to specify that a specific field must be valid IP address: $rules = [ 'email' => ['email' => true,], ];","title":"IP rule"},{"location":"v2.0.3/validation/#json-rule","text":"The JSON rule validates the json value $validation = new Validation('jsonValue','validate','json');","title":"JSON rule"},{"location":"v2.0.3/validation/#unique-rule","text":"The unique rule allows you to check if a given value exists in a specific database table: $validation = new Validation(['field'=> 'fieldLike_username','value'=>'valueToBeSearch'],'tabelName');","title":"Unique rule"},{"location":"v2.0.3/views/","text":"Zest framework provides two ways for views. The default, built-in templating engine, and without a templating engine. Zest framework can't support third-party templating engines, but if you want to, you can see how to implement third-party templating engines in next section. Creating a View in simple way without a templating engine. \u00b6 Typically, all views should be created inside the App/Views/ folder. Suppose you're going to create a home view. So in this case, save the file as App/Views/Home.php or App/Views/Home/Home.php (whatever you want). <!doctype html> < body > < div class = \"container\" > Welcome </ div > </ body > You can access the view form controller by echo View::View(\"Home/index\"); . Your home controller should look like this: <?php namespace App\\Controllers ; use \\Zest\\View\\View ; class Home extends \\Zest\\Controller\\Controller { public function index () { echo View :: view ( \"Home/index\" ); } } In the case of passing parameter, it should look like this: $data = ['name' => 'malik']; echo View::View(\"Home/index\",$data); You can access this parameter by: $name = $args['name']; Creating a View in a simple way with a templating engine \u00b6 Zest supports a built-in template engine that you can use in simple way. echo View::randerTemplate(\"Home/template.php\",[ 'name' => \"malik\", ]); Use in view file like this: {% name %} It prints \"malik\" on the screen. Minify HTML files \u00b6 ZestFramework minifies HTML by default. If you don't want to minify HTML view files, you should passed false argument in view method of the View class First Argument: file name with path like file or path/file. Second Argument: Any parameter that you want to be passed must be in an array. Third Argument: Minify; true => Minify, false => Don't minify. Must be bool . Default value is true .","title":"Views"},{"location":"v2.0.3/views/#creating-a-view-in-simple-way-without-a-templating-engine","text":"Typically, all views should be created inside the App/Views/ folder. Suppose you're going to create a home view. So in this case, save the file as App/Views/Home.php or App/Views/Home/Home.php (whatever you want). <!doctype html> < body > < div class = \"container\" > Welcome </ div > </ body > You can access the view form controller by echo View::View(\"Home/index\"); . Your home controller should look like this: <?php namespace App\\Controllers ; use \\Zest\\View\\View ; class Home extends \\Zest\\Controller\\Controller { public function index () { echo View :: view ( \"Home/index\" ); } } In the case of passing parameter, it should look like this: $data = ['name' => 'malik']; echo View::View(\"Home/index\",$data); You can access this parameter by: $name = $args['name'];","title":"Creating a View in simple way without a templating engine."},{"location":"v2.0.3/views/#creating-a-view-in-a-simple-way-with-a-templating-engine","text":"Zest supports a built-in template engine that you can use in simple way. echo View::randerTemplate(\"Home/template.php\",[ 'name' => \"malik\", ]); Use in view file like this: {% name %} It prints \"malik\" on the screen.","title":"Creating a View in a simple way with a templating engine"},{"location":"v2.0.3/views/#minify-html-files","text":"ZestFramework minifies HTML by default. If you don't want to minify HTML view files, you should passed false argument in view method of the View class First Argument: file name with path like file or path/file. Second Argument: Any parameter that you want to be passed must be in an array. Third Argument: Minify; true => Minify, false => Don't minify. Must be bool . Default value is true .","title":"Minify HTML files"}]}